Index: git/drivers/net/can/spi/mcp251x.c
===================================================================
--- git.orig/drivers/net/can/spi/mcp251x.c	2016-06-15 10:22:24.997681435 +0200
+++ git/drivers/net/can/spi/mcp251x.c	2016-06-15 10:22:27.405681400 +0200
@@ -308,6 +308,8 @@
  * conversation with the chip and to avoid doing really nasty things
  * (like injecting bogus packets in the network stack).
  */
+extern int spiTransferMessage(struct spi_device *spi, struct spi_message *msg);
+
 static int mcp251x_spi_trans(struct spi_device *spi, int len)
 {
 	struct mcp251x_priv *priv = spi_get_drvdata(spi);
@@ -316,6 +318,10 @@
 		.rx_buf = priv->spi_rx_buf,
 		.len = len,
 		.cs_change = 0,
+		.bits_per_word = spi->bits_per_word,
+		.speed_hz = spi->max_speed_hz,
+		.tx_nbits = SPI_NBITS_SINGLE,
+		.rx_nbits = SPI_NBITS_SINGLE,
 	};
 	struct spi_message m;
 	int ret;
Index: git/drivers/spi/spi.c
===================================================================
--- git.orig/drivers/spi/spi.c	2016-06-15 10:22:25.593681426 +0200
+++ git/drivers/spi/spi.c	2016-06-15 10:22:27.405681400 +0200
@@ -917,6 +917,81 @@
 	__spi_pump_messages(master, true);
 }
 
+int spiTransferMessage(struct spi_device *spi, struct spi_message *msg)
+{
+	struct spi_master *master = spi->master;
+	//unsigned long flags;
+	int ret;
+	bool was_busy = false;
+	struct spi_transfer *xfer;
+
+	msg->spi = spi;
+	msg->complete = NULL;
+
+	if (list_empty(&msg->transfers))
+		return -EINVAL;
+
+	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
+		msg->frame_length += xfer->len;
+	}
+	msg->status = -EINPROGRESS;
+
+	if (!master->running) {
+		//printk("spiTransferMessage: master not running\n");
+		return -1;
+	}
+	/* Make sure we are not already running a message */
+	if (master->cur_msg) {
+		//printk("spiTransferMessage: we are not already running a message\n");
+		return -1;
+	}
+	/* Extract head of queue */
+	master->cur_msg = msg;
+
+	if (master->busy)
+		was_busy = true;
+	else
+		master->busy = true;
+
+	if (!was_busy && master->prepare_transfer_hardware) {
+		ret = master->prepare_transfer_hardware(master);
+		if (ret) {
+			dev_err(&master->dev, "failed to prepare transfer hardware\n");
+			//if (master->auto_runtime_pm)
+			//  pm_runtime_put(master->dev.parent);
+			return -1;
+		}
+	}
+
+	if (master->prepare_message) {
+		ret = master->prepare_message(master, master->cur_msg);
+		if (ret) {
+			dev_err(&master->dev, "failed to prepare message: %d\n", ret);
+			master->cur_msg->status = ret;
+			spi_finalize_current_message(master);
+			return -1;
+		}
+		master->cur_msg_prepared = true;
+	}
+
+	ret = spi_map_msg(master, master->cur_msg);
+	if (ret) {
+		dev_err(&master->dev, "spi_map_msg fail\n");
+		master->cur_msg->status = ret;
+		spi_finalize_current_message(master);
+		return-1;
+	}
+
+	ret = master->transfer_one_message(master, master->cur_msg);
+	if (ret) {
+		dev_err(&master->dev, "failed to transfer one message from queue\n");
+		return-1;
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(spiTransferMessage);
+
 static int spi_init_queue(struct spi_master *master)
 {
 	struct sched_param param = { .sched_priority = MAX_RT_PRIO - 1 };
