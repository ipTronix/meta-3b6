Index: git/include/linux/input/lsm330.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/include/linux/input/lsm330.h	2015-07-15 12:46:18.661391100 +0200
@@ -0,0 +1,156 @@
+/*
+********************* (C) COPYRIGHT 2012 STMicroelectronics ********************
+*
+* File Name		: lsm330.h
+* Authors		: MH - C&I BU - Application Team
+*			: Matteo Dameno (matteo.dameno@st.com)
+*			: Denis Ciocca (denis.ciocca@st.com)
+* Version		: V.1.0.2
+* Date			: 2012/Oct/15
+*
+********************************************************************************
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 2 as
+* published by the Free Software Foundation.
+*
+* THE PRESENT SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
+* OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, FOR THE SOLE
+* PURPOSE TO SUPPORT YOUR APPLICATION DEVELOPMENT.
+* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
+* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
+* CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
+* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
+*
+********************************************************************************
+
+********************************************************************************
+Version History.
+	V 1.0.0		First Release
+	V 1.0.2		I2C address bugfix
+********************************************************************************
+SYSFS interface
+- range: set full scale
+	-> accelerometer: 	2,4,6,8,16 				[g]
+	-> gyroscope:		250,500,2000				[dps]
+- pollrate_ms: set 1/ODR
+	-> accelerometer:	LSM330_ACC_MIN_POLL_PERIOD_MS < t	[ms]
+	-> gyroscope:		LSM330_GYR_MIN_POLL_PERIOD_MS < t	[ms]
+- enable_device: enable/disable sensor					[1/0]
+
+
+INPUT subsystem: NOTE-> output data INCLUDE the sensitivity in accelerometer,
+			but NOT INCLUDE the sensitivity in gyroscope.
+- accelerometer:	abs_x, abs_y, abs_z		[ug]
+- gyroscope:		abs_x, abs_y, abs_z		[raw data]
+*******************************************************************************/
+
+#ifndef	__LSM330_H__
+#define	__LSM330_H__
+
+
+#define	LSM330_ACC_DEV_NAME			"lsm330_acc"
+#define LSM330_GYR_DEV_NAME			"lsm330_gyr"
+
+#define LSM330_GYR_SAD0L		(0x00)
+#define LSM330_ACC_SAD0L		(0x02)
+#define LSM330_SAD0H			(0x01)
+#define LSM330_ACC_I2C_SADROOT		(0x07)
+#define LSM330_ACC_I2C_SAD_L		((LSM330_ACC_I2C_SADROOT<<2) | \
+							LSM330_ACC_SAD0L)
+#define LSM330_ACC_I2C_SAD_H		((LSM330_ACC_I2C_SADROOT<<2) | \
+							LSM330_SAD0H)
+
+#define LSM330_GYR_I2C_SADROOT		(0x35)
+#define LSM330_GYR_I2C_SAD_L		((LSM330_GYR_I2C_SADROOT<<1)| \
+							LSM330_GYR_SAD0L)
+#define LSM330_GYR_I2C_SAD_H		((LSM330_GYR_I2C_SADROOT<<1)| \
+							LSM330_SAD0H)
+
+/* Poll Interval */
+#define	LSM330_ACC_MIN_POLL_PERIOD_MS		1
+
+#define LSM330_GYR_MIN_POLL_PERIOD_MS		2
+
+
+#ifdef	__KERNEL__
+
+/* Interrupt */
+#define LSM330_ACC_DEFAULT_INT1_GPIO		(-EINVAL)
+#define LSM330_ACC_DEFAULT_INT2_GPIO		(-EINVAL)
+
+#define LSM330_GYR_DEFAULT_INT1_GPIO		(-EINVAL)
+#define LSM330_GYR_DEFAULT_INT2_GPIO		(-EINVAL)
+
+
+/* Accelerometer Sensor Full Scale */
+#define LSM330_ACC_G_2G				(0x00)
+#define LSM330_ACC_G_4G				(0x08)
+#define LSM330_ACC_G_6G				(0x10)
+#define LSM330_ACC_G_8G				(0x18)
+#define LSM330_ACC_G_16G			(0x20)
+
+/* Gyroscope Sensor Full Scale */
+#define LSM330_GYR_FS_250DPS			(0x00)
+#define LSM330_GYR_FS_500DPS			(0x10)
+#define LSM330_GYR_FS_2000DPS			(0x30)
+
+
+
+struct lsm330_acc_platform_data {
+	unsigned int poll_interval;
+	unsigned int min_interval;
+
+	u8 fs_range;
+
+	u8 axis_map_x;
+	u8 axis_map_y;
+	u8 axis_map_z;
+
+	u8 negate_x;
+	u8 negate_y;
+	u8 negate_z;
+
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(void);
+	int (*power_off)(void);
+
+	/* set gpio_int either to the choosen gpio pin number or to -EINVAL
+	 * if leaved unconnected
+	 */
+	int gpio_int1;
+	int gpio_int2;
+};
+
+struct lsm330_gyr_platform_data {
+	int (*init)(void);
+	void (*exit)(void);
+	int (*power_on)(void);
+	int (*power_off)(void);
+
+	unsigned int poll_interval;
+	unsigned int min_interval;
+
+	u8 fs_range;
+
+	/* fifo related */
+	u8 watermark;
+	u8 fifomode;
+
+	/* gpio ports for interrupt pads */
+	int gpio_int1;
+	int gpio_int2;		/* int for fifo */
+
+	/* axis mapping */
+	u8 axis_map_x;
+	u8 axis_map_y;
+	u8 axis_map_z;
+
+	u8 negate_x;
+	u8 negate_y;
+	u8 negate_z;
+};
+#endif	/* __KERNEL__ */
+
+#endif	/* __LSM330_H__ */
Index: git/drivers/input/misc/Kconfig
===================================================================
--- git.orig/drivers/input/misc/Kconfig	2015-07-13 17:14:01.625391100 +0200
+++ git/drivers/input/misc/Kconfig	2015-07-15 12:49:02.245391100 +0200
@@ -676,4 +676,22 @@
 	  This driver can also be built as a module.  If so, the module
 	  will be called isl29023.
 
+config INPUT_LSM330_ACC
+	tristate "LSM330 Accelerometer"
+	depends on I2C && SYSFS
+	help
+	  If you say yes here you get support for the LSM330 accelerometer.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called lsm330_acc.
+
+config INPUT_LSM330_GYR
+	tristate "LSM330 Gyroscope"
+	depends on I2C && SYSFS
+	help
+	  If you say yes here you get support for the LSM330 gyroscope.
+
+	  This driver can also be built as a module.  If so, the module
+	  will be called lsm330_gyr.
+
 endif
Index: git/drivers/input/misc/Makefile
===================================================================
--- git.orig/drivers/input/misc/Makefile	2015-07-13 17:14:01.625391100 +0200
+++ git/drivers/input/misc/Makefile	2015-07-15 12:47:26.553391100 +0200
@@ -64,3 +64,7 @@
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
 obj-$(CONFIG_INPUT_ISL29023)            += isl29023.o
+
+
+obj-$(CONFIG_INPUT_LSM330_ACC)          += lsm330_acc.o
+obj-$(CONFIG_INPUT_LSM330_GYR)          += lsm330_gyr.o
Index: git/drivers/input/misc/lsm330_acc.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/drivers/input/misc/lsm330_acc.c	2015-07-15 12:47:23.525391100 +0200
@@ -0,0 +1,1509 @@
+/******************** (C) COPYRIGHT 2012 STMicroelectronics ********************
+ *
+ * File Name		: lsm330_acc.c
+ * Authors		: MSH - Motion Mems BU - Application Team
+ *			: Matteo Dameno (matteo.dameno@st.com)
+ *			: Denis Ciocca (denis.ciocca@st.com)
+ *			: Author is willing to be considered the contact
+ *			: and update point for the driver.
+* Version		: V.1.0.2
+* Date			: 2012/Oct/15
+ * Description		: LSM330 accelerometer driver
+ *
+ *******************************************************************************
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * THE PRESENT SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
+ * OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, FOR THE SOLE
+ * PURPOSE TO SUPPORT YOUR APPLICATION DEVELOPMENT.
+ * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
+ * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
+ * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
+ * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
+ *
+ * THIS SOFTWARE IS SPECIFICALLY DESIGNED FOR EXCLUSIVE USE WITH ST PARTS.
+ *
+ ******************************************************************************
+Version History.
+	V 1.0.0		First Release
+	V 1.0.2		I2C address bugfix
+ ******************************************************************************/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/fs.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/uaccess.h>
+#include <linux/workqueue.h>
+#include <linux/irq.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/slab.h>
+
+#include <linux/input/lsm330.h>
+/*#include "lsm330.h"*/
+
+
+//#define	DEBUG
+
+#define G_MAX			23920640	/* ug */
+#define	I2C_RETRY_DELAY		5		/* Waiting for signals [ms] */
+#define	I2C_RETRIES		5		/* Number of retries */
+#define	I2C_AUTO_INCREMENT	0x80		/* Autoincrement i2c address */
+
+#define SENSITIVITY_2G		60		/* ug/LSB	*/
+#define SENSITIVITY_4G		120		/* ug/LSB	*/
+#define SENSITIVITY_6G		180		/* ug/LSB	*/
+#define SENSITIVITY_8G		240		/* ug/LSB	*/
+#define SENSITIVITY_16G		730		/* ug/LSB	*/
+
+#define	LSM330_ACC_FS_MASK	(0x38)
+
+/* Output Data Rates ODR */
+#define	LSM330_ODR_MASK		0XF0
+#define LSM330_PM_OFF		0x00		/* OFF */
+#define	LSM330_ODR3_125		0x10		/*    3.125 Hz */
+#define	LSM330_ODR6_25		0x20		/*    6.25  Hz */
+#define	LSM330_ODR12_5		0x30		/*   12.5   Hz */
+#define	LSM330_ODR25		0x40		/*   25     Hz */
+#define	LSM330_ODR50		0x50		/*   50     Hz */
+#define	LSM330_ODR100		0x60		/*  100     Hz */
+#define	LSM330_ODR400		0x70		/*  400     Hz */
+#define	LSM330_ODR800		0x80		/*  800     Hz */
+#define	LSM330_ODR1600		0x90		/* 1600     Hz */
+
+/* Registers configuration Mask and settings */
+/* CTRLREG1 */
+#define LSM330_INTEN_MASK		0x01
+#define LSM330_INTEN_OFF		0x00
+#define LSM330_INTEN_ON			0x01
+
+/* CTRLREG2 */
+#define LSM330_HIST1_MASK		0xE0
+#define LSM330_SM1INT_PIN_MASK		0x08
+#define LSM330_SM1INT_PINB		0x08
+#define LSM330_SM1INT_PINA		0x00
+#define LSM330_SM1_EN_MASK		0x01
+#define LSM330_SM1_EN_ON		0x01
+#define LSM330_SM1_EN_OFF		0x00
+/* */
+
+/* CTRLREG3 */
+#define LSM330_HIST2_MASK		0xE0
+#define LSM330_SM2INT_PIN_MASK		0x08
+#define LSM330_SM2INT_PINB		0x08
+#define LSM330_SM2INT_PINA		0x00
+#define LSM330_SM2_EN_MASK		0x01
+#define LSM330_SM2_EN_ON		0x01
+#define LSM330_SM2_EN_OFF		0x00
+/* */
+
+/* CTRLREG4 */
+#define LSM330_INT_ACT_MASK		(0x01 << 6)
+#define LSM330_INT_ACT_H		(0x01 << 6)
+#define LSM330_INT_ACT_L		0x00
+
+#define LSM330_INT2_EN_MASK		(0x01 << 4)
+#define LSM330_INT2_EN_ON		(0x01 << 4)
+#define LSM330_INT2_EN_OFF		0x00
+
+#define LSM330_INT1_EN_MASK		(0x01 << 3)
+#define LSM330_INT1_EN_ON		(0x01 << 3)
+#define LSM330_INT1_EN_OFF		0x00
+/* */
+
+#define	OUT_AXISDATA_REG		LSM330_OUTX_L
+#define WHOAMI_LSM330_ACC		0x40	/* Expected content for WAI */
+
+/*	CONTROL REGISTERS	*/
+#define	LSM330_WHO_AM_I			0x0F	/* WhoAmI register Address */
+
+#define	LSM330_OUTX_L			0x28	/* Output X LSByte */
+#define	LSM330_OUTX_H			0x29	/* Output X MSByte */
+#define	LSM330_OUTY_L			0x2A	/* Output Y LSByte */
+#define	LSM330_OUTY_H			0x2B	/* Output Y MSByte */
+#define	LSM330_OUTZ_L			0x2C	/* Output Z LSByte */
+#define	LSM330_OUTZ_H			0x2D	/* Output Z MSByte */
+#define	LSM330_LC_L			0x16	/* LSByte Long Counter Status */
+#define	LSM330_LC_H			0x17	/* MSByte Long Counter Status */
+
+#define	LSM330_STATUS_REG		0x27	/* Status */
+
+#define	LSM330_CTRL_REG1		0x21	/* control reg 1 */
+#define	LSM330_CTRL_REG2		0x22	/* control reg 2 */
+#define	LSM330_CTRL_REG3		0x23	/* control reg 3 */
+#define	LSM330_CTRL_REG4		0x20	/* control reg 4 */
+#define	LSM330_CTRL_REG5		0x24	/* control reg 3 */
+#define	LSM330_CTRL_REG6		0x25	/* control reg 4 */
+
+#define	LSM330_OFF_X			0x10	/* Offset X Corr */
+#define	LSM330_OFF_Y			0x11	/* Offset Y Corr */
+#define	LSM330_OFF_Z			0x12	/* Offset Z Corr */
+
+#define	LSM330_CS_X			0x13	/* Const Shift X */
+#define	LSM330_CS_Y			0x14	/* Const Shift Y */
+#define	LSM330_CS_Z			0x15	/* Const Shift Z */
+
+#define	LSM330_VFC_1			0x1B	/* Vect Filter Coeff 1 */
+#define	LSM330_VFC_2			0x1C	/* Vect Filter Coeff 2 */
+#define	LSM330_VFC_3			0x1D	/* Vect Filter Coeff 3 */
+#define	LSM330_VFC_4			0x1E	/* Vect Filter Coeff 4 */
+
+/*	end CONTROL REGISTRES	*/
+
+
+/* RESUME STATE INDICES */
+#define	LSM330_RES_LC_L				0
+#define	LSM330_RES_LC_H				1
+
+#define	LSM330_RES_CTRL_REG1			2
+#define	LSM330_RES_CTRL_REG2			3
+#define	LSM330_RES_CTRL_REG3			4
+#define	LSM330_RES_CTRL_REG4			5
+#define	LSM330_RES_CTRL_REG5			6
+
+#define	LSM330_RES_TIM4_1			20
+#define	LSM330_RES_TIM3_1			21
+#define	LSM330_RES_TIM2_1_L			22
+#define	LSM330_RES_TIM2_1_H			23
+#define	LSM330_RES_TIM1_1_L			24
+#define	LSM330_RES_TIM1_1_H			25
+
+#define	LSM330_RES_THRS2_1			26
+#define	LSM330_RES_THRS1_1			27
+#define	LSM330_RES_SA_1				28
+#define	LSM330_RES_MA_1				29
+#define	LSM330_RES_SETT_1			30
+
+#define	LSM330_RES_TIM4_2			31
+#define	LSM330_RES_TIM3_2			32
+#define	LSM330_RES_TIM2_2_L			33
+#define	LSM330_RES_TIM2_2_H			34
+#define	LSM330_RES_TIM1_2_L			35
+#define	LSM330_RES_TIM1_2_H			36
+
+#define	LSM330_RES_THRS2_2			37
+#define	LSM330_RES_THRS1_2			38
+#define	LSM330_RES_DES_2			39
+#define	LSM330_RES_SA_2				40
+#define	LSM330_RES_MA_2				41
+#define	LSM330_RES_SETT_2			42
+
+#define	LSM330_RESUME_ENTRIES			43
+
+
+
+#define	LSM330_STATE_PR_SIZE			16
+/* end RESUME STATE INDICES */
+
+/* STATE PROGRAMS ENABLE CONTROLS */
+#define	LSM330_SM1_DIS_SM2_DIS			0x00
+#define	LSM330_SM1_DIS_SM2_EN			0x01
+#define	LSM330_SM1_EN_SM2_DIS			0x02
+#define	LSM330_SM1_EN_SM2_EN			0x03
+
+/* INTERRUPTS ENABLE CONTROLS */
+#define	LSM330_INT1_DIS_INT2_DIS		0x00
+#define	LSM330_INT1_DIS_INT2_EN			0x01
+#define	LSM330_INT1_EN_INT2_DIS			0x02
+#define	LSM330_INT1_EN_INT2_EN			0x03
+
+struct {
+	unsigned int cutoff_ms;
+	unsigned int mask;
+} lsm330_acc_odr_table[] = {
+		{    1, LSM330_ODR1600 },
+		{    3, LSM330_ODR400  },
+		{   10, LSM330_ODR100  },
+		{   20, LSM330_ODR50   },
+		{   40, LSM330_ODR25   },
+		{   80, LSM330_ODR12_5 },
+		{  160, LSM330_ODR6_25 },
+		{  320, LSM330_ODR3_125},
+};
+
+static const struct lsm330_acc_platform_data default_lsm330_acc_pdata = {
+	.fs_range = LSM330_ACC_G_2G,
+	.axis_map_x = 0,
+	.axis_map_y = 1,
+	.axis_map_z = 2,
+	.negate_x = 0,
+	.negate_y = 0,
+	.negate_z = 0,
+	.poll_interval = 100,
+	.min_interval = LSM330_ACC_MIN_POLL_PERIOD_MS,
+	.gpio_int1 = LSM330_ACC_DEFAULT_INT1_GPIO,
+	.gpio_int2 = LSM330_ACC_DEFAULT_INT2_GPIO,
+};
+
+struct lsm330_acc_data {
+	struct i2c_client *client;
+	struct lsm330_acc_platform_data *pdata;
+
+	struct mutex lock;
+	struct delayed_work input_work;
+
+	struct input_dev *input_dev;
+
+	int hw_initialized;
+	/* hw_working=-1 means not tested yet */
+	int hw_working;
+	atomic_t enabled;
+	int on_before_suspend;
+
+	u16 sensitivity;
+	u8 stateprogs_enable_setting;
+	u8 interrupts_enable_setting;
+
+	u8 resume_state[LSM330_RESUME_ENTRIES];
+	u8 resume_stmach_program1[LSM330_STATE_PR_SIZE];
+	u8 resume_stmach_program2[LSM330_STATE_PR_SIZE];
+
+	int irq1;
+	struct work_struct irq1_work;
+	struct workqueue_struct *irq1_work_queue;
+	int irq2;
+	struct work_struct irq2_work;
+	struct workqueue_struct *irq2_work_queue;
+
+#ifdef DEBUG
+	u8 reg_addr;
+#endif
+};
+
+
+/* sets default init values to be written in registers at probe stage */
+static void lsm330_acc_set_init_register_values(struct lsm330_acc_data *acc)
+{
+	acc->resume_state[LSM330_RES_LC_L] = 0x00;
+	acc->resume_state[LSM330_RES_LC_H] = 0x00;
+
+	acc->resume_state[LSM330_RES_CTRL_REG1] = LSM330_INT_ACT_H;
+	acc->resume_state[LSM330_RES_CTRL_REG2] = 0x00;
+	acc->resume_state[LSM330_RES_CTRL_REG3] = 0x00;
+	acc->resume_state[LSM330_RES_CTRL_REG4] = 0x8f;
+	acc->resume_state[LSM330_RES_CTRL_REG5] = 0x00;
+}
+
+static int lsm330_acc_i2c_read(struct lsm330_acc_data *acc,
+				u8 * buf, int len)
+{
+	int err;
+	int tries = 0;
+
+	struct i2c_msg	msgs[] = {
+		{
+			.addr = acc->client->addr,
+			.flags = acc->client->flags & I2C_M_TEN,
+			.len = 1,
+			.buf = buf,
+		},
+		{
+			.addr = acc->client->addr,
+			.flags = (acc->client->flags & I2C_M_TEN) | I2C_M_RD,
+			.len = len,
+			.buf = buf,
+		},
+	};
+
+	do {
+		err = i2c_transfer(acc->client->adapter, msgs, 2);
+		if (err != 2)
+			msleep_interruptible(I2C_RETRY_DELAY);
+	} while ((err != 2) && (++tries < I2C_RETRIES));
+
+	if (err != 2) {
+		dev_err(&acc->client->dev, "read transfer error\n");
+		err = -EIO;
+	} else {
+		err = 0;
+	}
+
+	return err;
+}
+
+static int lsm330_acc_i2c_write(struct lsm330_acc_data *acc, u8 * buf,
+								int len)
+{
+	int err;
+	int tries = 0;
+
+	struct i2c_msg msgs[] = {
+		{
+		 .addr = acc->client->addr,
+			.flags = acc->client->flags & I2C_M_TEN,
+		 .len = len + 1,
+		 .buf = buf,
+		 },
+	};
+
+	do {
+		err = i2c_transfer(acc->client->adapter, msgs, 1);
+		if (err != 1)
+			msleep_interruptible(I2C_RETRY_DELAY);
+	} while ((err != 1) && (++tries < I2C_RETRIES));
+
+	if (err != 1) {
+		dev_err(&acc->client->dev, "write transfer error\n");
+		err = -EIO;
+	} else {
+		err = 0;
+	}
+
+	return err;
+}
+
+static int lsm330_acc_i2c_update(struct lsm330_acc_data *acc,
+				u8 reg_address, u8 mask, u8 new_bit_values)
+{
+	int err = -1;
+	u8 rdbuf[1] = { reg_address };
+	u8 wrbuf[2] = { reg_address , 0x00 };
+
+	u8 init_val;
+	u8 updated_val;
+	err = lsm330_acc_i2c_read(acc, rdbuf, 1);
+	if (!(err < 0)) {
+		init_val = rdbuf[0];
+		updated_val = ((mask & new_bit_values) | ((~mask) & init_val));
+		wrbuf[1] = updated_val;
+		err = lsm330_acc_i2c_write(acc, wrbuf, 1);
+	}
+	return err;
+}
+
+static int lsm330_acc_hw_init(struct lsm330_acc_data *acc)
+{
+	int err = -1;
+	u8 buf[17];
+
+	pr_info("%s: hw init start\n", LSM330_ACC_DEV_NAME);
+
+	buf[0] = LSM330_WHO_AM_I;
+	err = lsm330_acc_i2c_read(acc, buf, 1);
+	if (err < 0) {
+	dev_warn(&acc->client->dev, "Error reading WHO_AM_I: is device "
+		"available/working?\n");
+		goto err_firstread;
+	} else
+		acc->hw_working = 1;
+
+	if (buf[0] != WHOAMI_LSM330_ACC) {
+	dev_err(&acc->client->dev,
+		"device unknown. Expected: 0x%x,"
+		" Replies: 0x%x\n", WHOAMI_LSM330_ACC, buf[0]);
+		err = -1; /* choose the right coded error */
+		goto err_unknown_device;
+	}
+
+
+	buf[0] = (I2C_AUTO_INCREMENT | LSM330_LC_L);
+	buf[1] = acc->resume_state[LSM330_RES_LC_L];
+	buf[2] = acc->resume_state[LSM330_RES_LC_H];
+	err = lsm330_acc_i2c_write(acc, buf, 2);
+	if (err < 0)
+		goto err_resume_state;
+
+	buf[0] = (I2C_AUTO_INCREMENT | LSM330_CTRL_REG2);
+	buf[1] = acc->resume_state[LSM330_RES_CTRL_REG2];
+	buf[2] = acc->resume_state[LSM330_RES_CTRL_REG3];
+	err = lsm330_acc_i2c_write(acc, buf, 2);
+	if (err < 0)
+		goto err_resume_state;
+
+	buf[0] = (I2C_AUTO_INCREMENT | LSM330_CTRL_REG4);
+	buf[1] = acc->resume_state[LSM330_RES_CTRL_REG4];
+	buf[2] = acc->resume_state[LSM330_RES_CTRL_REG1];
+	err = lsm330_acc_i2c_write(acc, buf, 2);
+	if (err < 0)
+		goto err_resume_state;
+
+	acc->hw_initialized = 1;
+	pr_info("%s: hw init done\n", LSM330_ACC_DEV_NAME);
+	return 0;
+
+err_firstread:
+	acc->hw_working = 0;
+err_unknown_device:
+err_resume_state:
+	acc->hw_initialized = 0;
+	dev_err(&acc->client->dev, "hw init error 0x%x,0x%x: %d\n", buf[0],
+			buf[1], err);
+	return err;
+}
+
+static void lsm330_acc_device_power_off(struct lsm330_acc_data *acc)
+{
+	int err;
+
+	err = lsm330_acc_i2c_update(acc, LSM330_CTRL_REG4,
+					LSM330_ODR_MASK, LSM330_PM_OFF);
+	if (err < 0)
+		dev_err(&acc->client->dev, "soft power off failed: %d\n", err);
+
+	if (acc->pdata->power_off) {
+		if(acc->pdata->gpio_int1)
+			disable_irq_nosync(acc->irq1);
+		if(acc->pdata->gpio_int2)
+			disable_irq_nosync(acc->irq2);
+		acc->pdata->power_off();
+		acc->hw_initialized = 0;
+	}
+	if (acc->hw_initialized) {
+		if(acc->pdata->gpio_int1 >= 0)
+			disable_irq_nosync(acc->irq1);
+		if(acc->pdata->gpio_int2 >= 0)
+			disable_irq_nosync(acc->irq2);
+		acc->hw_initialized = 0;
+	}
+}
+
+static int lsm330_acc_device_power_on(struct lsm330_acc_data *acc)
+{
+	int err = -1;
+
+	if (acc->pdata->power_on) {
+		err = acc->pdata->power_on();
+		if (err < 0) {
+			dev_err(&acc->client->dev,
+					"power_on failed: %d\n", err);
+			return err;
+		}
+		if(acc->pdata->gpio_int1 >= 0)
+			enable_irq(acc->irq1);
+		if(acc->pdata->gpio_int2 >= 0)
+			enable_irq(acc->irq2);
+	}
+
+	if (!acc->hw_initialized) {
+		err = lsm330_acc_hw_init(acc);
+		if (acc->hw_working == 1 && err < 0) {
+			lsm330_acc_device_power_off(acc);
+			return err;
+		}
+	}
+
+	if (acc->hw_initialized) {
+		if(acc->pdata->gpio_int1 >= 0)
+			enable_irq(acc->irq1);
+		if(acc->pdata->gpio_int2 >= 0)
+			enable_irq(acc->irq2);
+	}
+	return 0;
+}
+
+static irqreturn_t lsm330_acc_isr1(int irq, void *dev)
+{
+	struct lsm330_acc_data *acc = dev;
+
+	disable_irq_nosync(irq);
+	queue_work(acc->irq1_work_queue, &acc->irq1_work);
+	pr_info("%s: isr1 queued\n", LSM330_ACC_DEV_NAME);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t lsm330_acc_isr2(int irq, void *dev)
+{
+	struct lsm330_acc_data *acc = dev;
+
+	disable_irq_nosync(irq);
+	queue_work(acc->irq2_work_queue, &acc->irq2_work);
+	pr_info("%s: isr2 queued\n", LSM330_ACC_DEV_NAME);
+
+	return IRQ_HANDLED;
+}
+
+static void lsm330_acc_irq1_work_func(struct work_struct *work)
+{
+
+	struct lsm330_acc_data *acc;
+	acc = container_of(work, struct lsm330_acc_data, irq1_work);
+	/* TODO  add interrupt service procedure.
+		 ie:lsm330_acc_get_int1_source(acc); */
+	;
+	/*  */
+	pr_info("%s: IRQ1 triggered\n", LSM330_ACC_DEV_NAME);
+exit:
+	enable_irq(acc->irq1);
+}
+
+static void lsm330_acc_irq2_work_func(struct work_struct *work)
+{
+
+	struct lsm330_acc_data *acc;
+	acc = container_of(work, struct lsm330_acc_data, irq2_work);
+	/* TODO  add interrupt service procedure.
+		 ie:lsm330_acc_get_tap_source(acc); */
+	;
+	/*  */
+
+	pr_info("%s: IRQ2 triggered\n", LSM330_ACC_DEV_NAME);
+exit:
+	enable_irq(acc->irq2);
+}
+
+static int lsm330_acc_register_masked_update(struct lsm330_acc_data *acc,
+		u8 reg_address, u8 mask, u8 new_bit_values, int resume_index)
+{
+	u8 config[2] = {0};
+	u8 init_val, updated_val;
+	int err;
+	int step = 0;
+
+	config[0] = reg_address;
+	err = lsm330_acc_i2c_read(acc, config, 1);
+	if (err < 0)
+		goto error;
+	init_val = config[0];
+	init_val = acc->resume_state[resume_index];
+	step = 1;
+	updated_val = ((mask & new_bit_values) | ((~mask) & init_val));
+	config[0] = reg_address;
+	config[1] = updated_val;
+	err = lsm330_acc_i2c_write(acc, config, 1);
+	if (err < 0)
+		goto error;
+	acc->resume_state[resume_index] = updated_val;
+
+	return err;
+	error:
+		dev_err(&acc->client->dev,
+			"register 0x%x update failed at step %d, error: %d\n",
+				config[0], step, err);
+	return err;
+}
+
+static int lsm330_acc_update_fs_range(struct lsm330_acc_data *acc,
+								u8 new_fs_range)
+{
+	int err=-1;
+	u16 sensitivity;
+
+	switch (new_fs_range) {
+	case LSM330_ACC_G_2G:
+		sensitivity = SENSITIVITY_2G;
+		break;
+	case LSM330_ACC_G_4G:
+		sensitivity = SENSITIVITY_4G;
+		break;
+	case LSM330_ACC_G_6G:
+		sensitivity = SENSITIVITY_6G;
+		break;
+	case LSM330_ACC_G_8G:
+		sensitivity = SENSITIVITY_8G;
+		break;
+	case LSM330_ACC_G_16G:
+		sensitivity = SENSITIVITY_16G;
+		break;
+	default:
+		dev_err(&acc->client->dev, "invalid g range requested: %u\n",
+				new_fs_range);
+		return -EINVAL;
+	}
+
+	if (atomic_read(&acc->enabled)) {
+		/* Updates configuration register 1,
+		* which contains g range setting */
+		err = lsm330_acc_register_masked_update(acc, LSM330_CTRL_REG5,
+			LSM330_ACC_FS_MASK, new_fs_range, LSM330_RES_CTRL_REG5);
+		if(err < 0) {
+			dev_err(&acc->client->dev, "update g range failed\n");
+			return err;
+		}
+		else
+			acc->sensitivity = sensitivity;
+	}
+
+	if(err < 0)
+		dev_err(&acc->client->dev, "update g range not executed "
+						"because the device is off\n");
+	return err;
+}
+
+
+static int lsm330_acc_update_odr(struct lsm330_acc_data *acc,
+							int poll_interval_ms)
+{
+	int err = -1;
+	int i;
+	u8 new_odr;
+
+	/* Following, looks for the longest possible odr interval scrolling the
+	 * odr_table vector from the end (shortest interval) backward (longest
+	 * interval), to support the poll_interval requested by the system.
+	 * It must be the longest interval lower then the poll interval.*/
+	for (i = ARRAY_SIZE(lsm330_acc_odr_table) - 1; i >= 0; i--) {
+		if (lsm330_acc_odr_table[i].cutoff_ms <= poll_interval_ms)
+			break;
+	}
+	new_odr = lsm330_acc_odr_table[i].mask;
+
+	/* If device is currently enabled, we need to write new
+	 *  configuration out to it */
+	if (atomic_read(&acc->enabled)) {
+		err = lsm330_acc_register_masked_update(acc,
+			LSM330_CTRL_REG4, LSM330_ODR_MASK, new_odr,
+							LSM330_RES_CTRL_REG4);
+	}
+
+	if(err < 0)
+		dev_err(&acc->client->dev, "update odr failed\n");
+	return err;
+}
+
+
+#ifdef DEBUG
+static int lsm330_acc_register_write(struct lsm330_acc_data *acc, u8 *buf,
+		u8 reg_address, u8 new_value)
+{
+	int err = -1;
+
+	/* Sets configuration register at reg_address
+	 *  NOTE: this is a straight overwrite  */
+		buf[0] = reg_address;
+		buf[1] = new_value;
+		err = lsm330_acc_i2c_write(acc, buf, 1);
+		if (err < 0)
+			return err;
+	return err;
+}
+
+static int lsm330_acc_register_read(struct lsm330_acc_data *acc, u8 *buf,
+		u8 reg_address)
+{
+
+	int err = -1;
+	buf[0] = (reg_address);
+	err = lsm330_acc_i2c_read(acc, buf, 1);
+	return err;
+}
+
+static int lsm330_acc_register_update(struct lsm330_acc_data *acc, u8 *buf,
+		u8 reg_address, u8 mask, u8 new_bit_values)
+{
+	int err = -1;
+	u8 init_val;
+	u8 updated_val;
+	err = lsm330_acc_register_read(acc, buf, reg_address);
+	if (!(err < 0)) {
+		init_val = buf[0];
+		updated_val = ((mask & new_bit_values) | ((~mask) & init_val));
+		err = lsm330_acc_register_write(acc, buf, reg_address,
+				updated_val);
+	}
+	return err;
+}
+#endif
+
+
+static int lsm330_acc_get_acceleration_data(struct lsm330_acc_data *acc,
+		int *xyz)
+{
+	int err = -1;
+	/* Data bytes from hardware xL, xH, yL, yH, zL, zH */
+	u8 acc_data[6];
+	/* x,y,z hardware data */
+	s32 hw_d[3] = { 0 };
+
+	acc_data[0] = (I2C_AUTO_INCREMENT | OUT_AXISDATA_REG);
+	err = lsm330_acc_i2c_read(acc, acc_data, 6);
+	if (err < 0)
+		return err;
+
+	hw_d[0] = ((s16) ((acc_data[1] << 8) | acc_data[0]));
+	hw_d[1] = ((s16) ((acc_data[3] << 8) | acc_data[2]));
+	hw_d[2] = ((s16) ((acc_data[5] << 8) | acc_data[4]));
+
+	hw_d[0] = hw_d[0] * acc->sensitivity;
+	hw_d[1] = hw_d[1] * acc->sensitivity;
+	hw_d[2] = hw_d[2] * acc->sensitivity;
+
+
+	xyz[0] = ((acc->pdata->negate_x) ? (-hw_d[acc->pdata->axis_map_x])
+		   : (hw_d[acc->pdata->axis_map_x]));
+	xyz[1] = ((acc->pdata->negate_y) ? (-hw_d[acc->pdata->axis_map_y])
+		   : (hw_d[acc->pdata->axis_map_y]));
+	xyz[2] = ((acc->pdata->negate_z) ? (-hw_d[acc->pdata->axis_map_z])
+		   : (hw_d[acc->pdata->axis_map_z]));
+
+#ifdef DEBUG
+//	pr_info("%s read x=%d, y=%d, z=%d\n",
+//			LSM330_ACC_DEV_NAME, xyz[0], xyz[1], xyz[2]);
+#endif
+	return err;
+}
+
+static void lsm330_acc_report_values(struct lsm330_acc_data *acc,
+					int *xyz)
+{
+	input_report_abs(acc->input_dev, ABS_X, xyz[0]);
+	input_report_abs(acc->input_dev, ABS_Y, xyz[1]);
+	input_report_abs(acc->input_dev, ABS_Z, xyz[2]);
+	input_sync(acc->input_dev);
+}
+
+static int lsm330_acc_enable(struct lsm330_acc_data *acc)
+{
+	int err;
+
+	if (!atomic_cmpxchg(&acc->enabled, 0, 1)) {
+		err = lsm330_acc_device_power_on(acc);
+		if (err < 0) {
+			atomic_set(&acc->enabled, 0);
+			return err;
+		}
+		schedule_delayed_work(&acc->input_work,
+			msecs_to_jiffies(acc->pdata->poll_interval));
+	}
+
+	return 0;
+}
+
+static int lsm330_acc_disable(struct lsm330_acc_data *acc)
+{
+	if (atomic_cmpxchg(&acc->enabled, 1, 0)) {
+		cancel_delayed_work_sync(&acc->input_work);
+		lsm330_acc_device_power_off(acc);
+	}
+
+	return 0;
+}
+
+static ssize_t attr_get_polling_rate(struct device *dev,
+					struct device_attribute *attr,
+								char *buf)
+{
+	int val;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	mutex_lock(&acc->lock);
+	val = acc->pdata->poll_interval;
+	mutex_unlock(&acc->lock);
+	return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t attr_set_polling_rate(struct device *dev,
+					struct device_attribute *attr,
+						const char *buf, size_t size)
+{
+	int err;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	unsigned long interval_ms;
+
+	if (strict_strtoul(buf, 10, &interval_ms))
+		return -EINVAL;
+	if (!interval_ms)
+		return -EINVAL;
+	mutex_lock(&acc->lock);
+	err = lsm330_acc_update_odr(acc, interval_ms);
+	if(err >= 0)
+	{
+		acc->pdata->poll_interval = interval_ms;
+	}
+	mutex_unlock(&acc->lock);
+	return size;
+}
+
+static ssize_t attr_get_range(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	u8 val;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	int range = 2;
+	mutex_lock(&acc->lock);
+	val = acc->pdata->fs_range ;
+	switch(val) {
+	case LSM330_ACC_G_2G:
+		range = 2;
+		break;
+	case LSM330_ACC_G_4G:
+		range = 4;
+		break;
+	case LSM330_ACC_G_6G:
+		range = 6;
+		break;
+	case LSM330_ACC_G_8G:
+		range = 8;
+		break;
+	case LSM330_ACC_G_16G:
+		range = 16;
+		break;
+	}
+	mutex_unlock(&acc->lock);
+	return sprintf(buf, "%d\n", range);
+}
+
+static ssize_t attr_set_range(struct device *dev,
+				struct device_attribute *attr,
+						const char *buf, size_t size)
+{
+	int err;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	unsigned long val;
+	u8 range;
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+
+	switch(val) {
+		case 2:
+			range = LSM330_ACC_G_2G;
+			break;
+		case 4:
+			range = LSM330_ACC_G_4G;
+			break;
+		case 6:
+			range = LSM330_ACC_G_6G;
+			break;
+		case 8:
+			range = LSM330_ACC_G_8G;
+			break;
+		case 16:
+			range = LSM330_ACC_G_16G;
+			break;
+		default:
+			return -1;
+	}
+
+	mutex_lock(&acc->lock);
+	err = lsm330_acc_update_fs_range(acc, range);
+	if(err >= 0)
+	{
+		acc->pdata->fs_range = range;
+	}
+	mutex_unlock(&acc->lock);
+	return size;
+}
+
+static ssize_t attr_get_enable(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	int val = atomic_read(&acc->enabled);
+	return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t attr_set_enable(struct device *dev,
+				struct device_attribute *attr,
+						const char *buf, size_t size)
+{
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	unsigned long val;
+
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+
+	if (val)
+		lsm330_acc_enable(acc);
+	else
+		lsm330_acc_disable(acc);
+
+	return size;
+}
+
+
+static int lsm330_acc_interrupt_enable_control(struct lsm330_acc_data *acc,
+								u8 settings)
+{
+	u8 val1;
+	u8 val2 = LSM330_INTEN_ON;
+	u8 mask1 = (LSM330_INT1_EN_MASK | LSM330_INT2_EN_MASK);
+	int err = -1;
+	settings = settings & 0x03;
+
+	switch ( settings ) {
+	case LSM330_INT1_DIS_INT2_DIS:
+		val1 = (LSM330_INT1_EN_OFF | LSM330_INT2_EN_OFF);
+		val2 = LSM330_INTEN_OFF;
+		break;
+	case LSM330_INT1_DIS_INT2_EN:
+		val1 = (LSM330_INT1_EN_OFF | LSM330_INT2_EN_ON);
+		break;
+	case LSM330_INT1_EN_INT2_DIS:
+		val1 = (LSM330_INT1_EN_ON | LSM330_INT2_EN_OFF);
+		break;
+	case LSM330_INT1_EN_INT2_EN:
+		val1 = ( LSM330_INT1_EN_ON | LSM330_INT2_EN_ON);
+		break;
+	default :
+		pr_err("invalid interrupt setting : 0x%02x\n",settings);
+		return err;
+	}
+	err = lsm330_acc_register_masked_update(acc,
+		LSM330_CTRL_REG3, mask1, val1, LSM330_RES_CTRL_REG3);
+	if (err < 0 )
+		return err;
+
+	err = lsm330_acc_register_masked_update(acc,
+		LSM330_CTRL_REG1, LSM330_INTEN_MASK, val2,
+							LSM330_RES_CTRL_REG1);
+	if (err < 0 )
+			return err;
+	acc->interrupts_enable_setting = settings;
+#ifdef DEBUG
+	pr_err("interrupt setting : 0x%02x\n",acc->interrupts_enable_setting);
+#endif
+	return err;
+}
+
+static ssize_t attr_get_interr_enable(struct device *dev,
+		struct device_attribute *attr,	char *buf)
+{
+	u8 val;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	mutex_lock(&acc->lock);
+	val = acc->interrupts_enable_setting;
+	mutex_unlock(&acc->lock);
+	return sprintf(buf, "0x%02x\n", val);
+}
+
+static ssize_t attr_set_interr_enable(struct device *dev,
+		struct device_attribute *attr,	const char *buf, size_t size)
+{
+	int err = -1;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	long val=0;
+
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+
+
+	if ( val < 0x00 || val > LSM330_INT1_EN_INT2_EN){
+#ifdef DEBUG
+		pr_err("invalid interrupt setting, val: %d\n",val);
+#endif
+		return -EINVAL;
+	}
+
+	mutex_lock(&acc->lock);
+	err = lsm330_acc_interrupt_enable_control(acc, val);
+	mutex_unlock(&acc->lock);
+	if (err < 0)
+		return err;
+	return size;
+}
+
+#ifdef DEBUG
+/* PAY ATTENTION: These DEBUG funtions don't manage resume_state */
+static ssize_t attr_reg_set(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	int rc;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	u8 x[2];
+	unsigned long val;
+
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+	mutex_lock(&acc->lock);
+	x[0] = acc->reg_addr;
+	mutex_unlock(&acc->lock);
+	x[1] = val;
+	rc = lsm330_acc_i2c_write(acc, x, 1);
+	/*TODO: error need to be managed */
+	return size;
+}
+
+static ssize_t attr_reg_get(struct device *dev, struct device_attribute *attr,
+				char *buf)
+{
+	ssize_t ret;
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	int rc;
+	u8 data;
+
+	mutex_lock(&acc->lock);
+	data = acc->reg_addr;
+	mutex_unlock(&acc->lock);
+	rc = lsm330_acc_i2c_read(acc, &data, 1);
+	/*TODO: error need to be managed */
+	ret = sprintf(buf, "0x%02x\n", data);
+	return ret;
+}
+
+static ssize_t attr_addr_set(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	struct lsm330_acc_data *acc = dev_get_drvdata(dev);
+	unsigned long val;
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+	mutex_lock(&acc->lock);
+	acc->reg_addr = val;
+	mutex_unlock(&acc->lock);
+	return size;
+}
+#endif
+
+static struct device_attribute attributes[] = {
+
+	__ATTR(pollrate_ms, 0666, attr_get_polling_rate,
+							attr_set_polling_rate),
+	__ATTR(range, 0666, attr_get_range, attr_set_range),
+	__ATTR(enable_device, 0666, attr_get_enable, attr_set_enable),
+	__ATTR(enable_interrupt_output, 0666, attr_get_interr_enable,
+							attr_set_interr_enable),
+#ifdef DEBUG
+	__ATTR(reg_value, 0600, attr_reg_get, attr_reg_set),
+	__ATTR(reg_addr, 0200, NULL, attr_addr_set),
+#endif
+};
+
+static int create_sysfs_interfaces(struct device *dev)
+{
+	int i;
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		if (device_create_file(dev, attributes + i))
+			goto error;
+	return 0;
+
+error:
+	for ( ; i >= 0; i--)
+		device_remove_file(dev, attributes + i);
+	dev_err(dev, "%s:Unable to create interface\n", __func__);
+	return -1;
+}
+
+static int remove_sysfs_interfaces(struct device *dev)
+{
+	int i;
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		device_remove_file(dev, attributes + i);
+	return 0;
+}
+
+static void lsm330_acc_input_work_func(struct work_struct *work)
+{
+	struct lsm330_acc_data *acc;
+
+	int xyz[3] = { 0 };
+	int err;
+
+	acc = container_of(work, struct lsm330_acc_data, input_work);
+
+	mutex_lock(&acc->lock);
+	err = lsm330_acc_get_acceleration_data(acc, xyz);
+	if (err < 0)
+		dev_err(&acc->client->dev, "get_acceleration_data failed\n");
+	else
+		lsm330_acc_report_values(acc, xyz);
+
+	schedule_delayed_work(&acc->input_work, msecs_to_jiffies(
+			acc->pdata->poll_interval));
+	mutex_unlock(&acc->lock);
+}
+
+int lsm330_acc_input_open(struct input_dev *input)
+{
+	struct lsm330_acc_data *acc = input_get_drvdata(input);
+
+	return lsm330_acc_enable(acc);
+}
+
+void lsm330_acc_input_close(struct input_dev *dev)
+{
+	struct lsm330_acc_data *acc = input_get_drvdata(dev);
+
+	lsm330_acc_disable(acc);
+}
+
+static int lsm330_acc_validate_pdata(struct lsm330_acc_data *acc)
+{
+	acc->pdata->poll_interval = max(acc->pdata->poll_interval,
+			acc->pdata->min_interval);
+
+	if (acc->pdata->axis_map_x > 2 ||
+		acc->pdata->axis_map_y > 2 ||
+		 acc->pdata->axis_map_z > 2) {
+		dev_err(&acc->client->dev, "invalid axis_map value "
+			"x:%u y:%u z%u\n", acc->pdata->axis_map_x,
+				acc->pdata->axis_map_y, acc->pdata->axis_map_z);
+		return -EINVAL;
+	}
+
+	/* Only allow 0 and 1 for negation boolean flag */
+	if (acc->pdata->negate_x > 1 || acc->pdata->negate_y > 1
+			|| acc->pdata->negate_z > 1) {
+		dev_err(&acc->client->dev, "invalid negate value "
+			"x:%u y:%u z:%u\n", acc->pdata->negate_x,
+				acc->pdata->negate_y, acc->pdata->negate_z);
+		return -EINVAL;
+	}
+
+	/* Enforce minimum polling interval */
+	if (acc->pdata->poll_interval < acc->pdata->min_interval) {
+		dev_err(&acc->client->dev, "minimum poll interval violated\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static int lsm330_acc_input_init(struct lsm330_acc_data *acc)
+{
+	int err;
+
+	INIT_DELAYED_WORK(&acc->input_work, lsm330_acc_input_work_func);
+	acc->input_dev = input_allocate_device();
+	if (!acc->input_dev) {
+		err = -ENOMEM;
+		dev_err(&acc->client->dev, "input device allocation failed\n");
+		goto err0;
+	}
+
+	acc->input_dev->open = lsm330_acc_input_open;
+	acc->input_dev->close = lsm330_acc_input_close;
+	acc->input_dev->name = LSM330_ACC_DEV_NAME;
+
+	acc->input_dev->id.bustype = BUS_I2C;
+	acc->input_dev->dev.parent = &acc->client->dev;
+
+	input_set_drvdata(acc->input_dev, acc);
+
+	set_bit(EV_ABS, acc->input_dev->evbit);
+	/*	next is used for interruptA sources data if the case */
+	set_bit(ABS_MISC, acc->input_dev->absbit);
+	/*	next is used for interruptB sources data if the case */
+	set_bit(ABS_WHEEL, acc->input_dev->absbit);
+
+	input_set_abs_params(acc->input_dev, ABS_X, -G_MAX, G_MAX, 0, 0);
+	input_set_abs_params(acc->input_dev, ABS_Y, -G_MAX, G_MAX, 0, 0);
+	input_set_abs_params(acc->input_dev, ABS_Z, -G_MAX, G_MAX, 0, 0);
+	/*	next is used for interruptA sources data if the case */
+//input_set_abs_params(acc->input_dev, ABS_MISC, INT_MIN, INT_MAX, 0, 0);
+	/*	next is used for interruptB sources data if the case */
+//input_set_abs_params(acc->input_dev, ABS_WHEEL, INT_MIN, INT_MAX, 0, 0);
+
+
+	err = input_register_device(acc->input_dev);
+	if (err) {
+		dev_err(&acc->client->dev,
+				"unable to register input device %s\n",
+				acc->input_dev->name);
+		goto err1;
+	}
+
+	return 0;
+
+err1:
+	input_free_device(acc->input_dev);
+err0:
+	return err;
+}
+
+static void lsm330_acc_input_cleanup(struct lsm330_acc_data *acc)
+{
+	input_unregister_device(acc->input_dev);
+	input_free_device(acc->input_dev);
+}
+
+static int lsm330_acc_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+
+	struct lsm330_acc_data *acc;
+
+	int err = -1;
+
+	pr_info("%s: probe start.\n", LSM330_ACC_DEV_NAME);
+
+	/*if (client->dev.platform_data == NULL) {
+		dev_err(&client->dev, "platform data is NULL. exiting.\n");
+		err = -ENODEV;
+		goto exit_check_functionality_failed;
+	}*/
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "client not i2c capable\n");
+		err = -ENODEV;
+		goto exit_check_functionality_failed;
+	}
+
+
+	acc = kzalloc(sizeof(struct lsm330_acc_data), GFP_KERNEL);
+	if (acc == NULL) {
+		err = -ENOMEM;
+		dev_err(&client->dev,
+				"failed to allocate memory for module data: "
+					"%d\n", err);
+		goto exit_check_functionality_failed;
+	}
+
+	mutex_init(&acc->lock);
+	mutex_lock(&acc->lock);
+
+	acc->client = client;
+	i2c_set_clientdata(client, acc);
+
+	acc->pdata = kmalloc(sizeof(*acc->pdata), GFP_KERNEL);
+	if (acc->pdata == NULL) {
+		err = -ENOMEM;
+		dev_err(&client->dev,
+				"failed to allocate memory for pdata: %d\n",
+				err);
+		goto err_mutexunlock;
+	}
+
+	if(client->dev.platform_data == NULL) {
+		pr_info("using default platform_data for accelerometer\n");
+		memcpy(acc->pdata, &default_lsm330_acc_pdata,
+							sizeof(*acc->pdata));
+	} else {
+		memcpy(acc->pdata, client->dev.platform_data,
+							sizeof(*acc->pdata));
+	}
+
+	err = lsm330_acc_validate_pdata(acc);
+	if (err < 0) {
+		dev_err(&client->dev, "failed to validate platform data\n");
+		goto exit_kfree_pdata;
+	}
+
+
+	if (acc->pdata->init) {
+		err = acc->pdata->init();
+		if (err < 0) {
+			dev_err(&client->dev, "init failed: %d\n", err);
+			goto err_pdata_init;
+		}
+	}
+
+	if(acc->pdata->gpio_int1 >= 0){
+		acc->irq1 = gpio_to_irq(acc->pdata->gpio_int1);
+		pr_info("%s: %s has set irq1 to irq: %d "
+							"mapped on gpio:%d\n",
+			LSM330_ACC_DEV_NAME, __func__, acc->irq1,
+							acc->pdata->gpio_int1);
+	}
+
+	if(acc->pdata->gpio_int2 >= 0){
+		acc->irq2 = gpio_to_irq(acc->pdata->gpio_int2);
+		pr_info("%s: %s has set irq2 to irq: %d "
+							"mapped on gpio:%d\n",
+			LSM330_ACC_DEV_NAME, __func__, acc->irq2,
+							acc->pdata->gpio_int2);
+	}
+
+	/* resume state init config */
+	memset(acc->resume_state, 0, ARRAY_SIZE(acc->resume_state));
+	lsm330_acc_set_init_register_values(acc);
+
+	err = lsm330_acc_device_power_on(acc);
+	if (err < 0) {
+		dev_err(&client->dev, "power on failed: %d\n", err);
+		goto err_pdata_init;
+	}
+
+	atomic_set(&acc->enabled, 1);
+
+	err = lsm330_acc_interrupt_enable_control(acc,
+						acc->interrupts_enable_setting);
+	if (err < 0) {
+		dev_err(&client->dev, "interrupt settings failed\n");
+		goto  err_power_off;
+	}
+
+	err = lsm330_acc_update_fs_range(acc, acc->pdata->fs_range);
+	if (err < 0) {
+		dev_err(&client->dev, "update_fs_range failed\n");
+		goto  err_power_off;
+	}
+
+	err = lsm330_acc_update_odr(acc, acc->pdata->poll_interval);
+	if (err < 0) {
+		dev_err(&client->dev, "update_odr failed\n");
+		goto  err_power_off;
+	}
+
+	err = lsm330_acc_input_init(acc);
+	if (err < 0) {
+		dev_err(&client->dev, "input init failed\n");
+		goto err_power_off;
+	}
+
+
+	err = create_sysfs_interfaces(&client->dev);
+	if (err < 0) {
+		dev_err(&client->dev,
+		   "device LSM330_ACC_DEV_NAME sysfs register failed\n");
+		goto err_input_cleanup;
+	}
+
+	lsm330_acc_device_power_off(acc);
+
+	/* As default, do not report information */
+	atomic_set(&acc->enabled, 0);
+
+	if(acc->pdata->gpio_int1 >= 0){
+		INIT_WORK(&acc->irq1_work, lsm330_acc_irq1_work_func);
+		acc->irq1_work_queue =
+			create_singlethread_workqueue("lsm330_acc_wq1");
+		if (!acc->irq1_work_queue) {
+			err = -ENOMEM;
+			dev_err(&client->dev,
+					"cannot create work queue1: %d\n", err);
+			goto err_remove_sysfs_int;
+		}
+		err = request_irq(acc->irq1, lsm330_acc_isr1,
+				IRQF_TRIGGER_RISING, "lsm330_acc_irq1", acc);
+		if (err < 0) {
+			dev_err(&client->dev, "request irq1 failed: %d\n", err);
+			goto err_destoyworkqueue1;
+		}
+		disable_irq_nosync(acc->irq1);
+	}
+
+	if(acc->pdata->gpio_int2 >= 0){
+		INIT_WORK(&acc->irq2_work, lsm330_acc_irq2_work_func);
+		acc->irq2_work_queue =
+			create_singlethread_workqueue("lsm330_acc_wq2");
+		if (!acc->irq2_work_queue) {
+			err = -ENOMEM;
+			dev_err(&client->dev,
+					"cannot create work queue2: %d\n", err);
+			goto err_free_irq1;
+		}
+		err = request_irq(acc->irq2, lsm330_acc_isr2,
+				IRQF_TRIGGER_RISING, "lsm330_acc_irq2", acc);
+		if (err < 0) {
+			dev_err(&client->dev, "request irq2 failed: %d\n", err);
+			goto err_destoyworkqueue2;
+		}
+		disable_irq_nosync(acc->irq2);
+	}
+
+
+
+	mutex_unlock(&acc->lock);
+
+	dev_info(&client->dev, "%s: probed\n", LSM330_ACC_DEV_NAME);
+
+	return 0;
+
+err_destoyworkqueue2:
+	if(acc->pdata->gpio_int2 >= 0)
+		destroy_workqueue(acc->irq2_work_queue);
+err_free_irq1:
+	free_irq(acc->irq1, acc);
+err_destoyworkqueue1:
+	if(acc->pdata->gpio_int1 >= 0)
+		destroy_workqueue(acc->irq1_work_queue);
+err_remove_sysfs_int:
+	remove_sysfs_interfaces(&client->dev);
+err_input_cleanup:
+	lsm330_acc_input_cleanup(acc);
+err_power_off:
+	lsm330_acc_device_power_off(acc);
+err_pdata_init:
+	if (acc->pdata->exit)
+		acc->pdata->exit();
+exit_kfree_pdata:
+	kfree(acc->pdata);
+err_mutexunlock:
+	mutex_unlock(&acc->lock);
+//err_freedata:
+	kfree(acc);
+exit_check_functionality_failed:
+	pr_err("%s: Driver Init failed\n", LSM330_ACC_DEV_NAME);
+	return err;
+}
+
+static int lsm330_acc_remove(struct i2c_client *client)
+{
+	struct lsm330_acc_data *acc = i2c_get_clientdata(client);
+
+	if(acc->pdata->gpio_int1 >= 0){
+		free_irq(acc->irq1, acc);
+		gpio_free(acc->pdata->gpio_int1);
+		destroy_workqueue(acc->irq1_work_queue);
+	}
+
+	if(acc->pdata->gpio_int2 >= 0){
+		free_irq(acc->irq2, acc);
+		gpio_free(acc->pdata->gpio_int2);
+		destroy_workqueue(acc->irq2_work_queue);
+	}
+
+	if (atomic_cmpxchg(&acc->enabled, 1, 0))
+			cancel_delayed_work_sync(&acc->input_work);
+
+	lsm330_acc_device_power_off(acc);
+	lsm330_acc_input_cleanup(acc);
+	remove_sysfs_interfaces(&client->dev);
+
+	if (acc->pdata->exit)
+		acc->pdata->exit();
+
+	kfree(acc->pdata);
+	kfree(acc);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int lsm330_acc_resume(struct i2c_client *client)
+{
+	struct lsm330_acc_data *acc = i2c_get_clientdata(client);
+
+	if (acc->on_before_suspend)
+		return lsm330_acc_enable(acc);
+	return 0;
+}
+
+static int lsm330_acc_suspend(struct i2c_client *client, pm_message_t mesg)
+{
+	struct lsm330_acc_data *acc = i2c_get_clientdata(client);
+
+	acc->on_before_suspend = atomic_read(&acc->enabled);
+	return lsm330_acc_disable(acc);
+}
+#else
+#define lsm330_acc_suspend	NULL
+#define lsm330_acc_resume	NULL
+#endif /* CONFIG_PM */
+
+static const struct i2c_device_id lsm330_acc_id[]
+		= { { LSM330_ACC_DEV_NAME, 0 }, { }, };
+
+MODULE_DEVICE_TABLE(i2c, lsm330_acc_id);
+
+static struct i2c_driver lsm330_acc_driver = {
+	.driver = {
+			.owner = THIS_MODULE,
+			.name = LSM330_ACC_DEV_NAME,
+		  },
+	.probe = lsm330_acc_probe,
+	.remove = lsm330_acc_remove,
+	.suspend = lsm330_acc_suspend,
+	.resume = lsm330_acc_resume,
+	.id_table = lsm330_acc_id,
+};
+
+static int __init lsm330_acc_init(void)
+{
+	pr_info("%s accelerometer driver: init\n", LSM330_ACC_DEV_NAME);
+	return i2c_add_driver(&lsm330_acc_driver);
+}
+
+static void __exit lsm330_acc_exit(void)
+{
+#ifdef DEBUG
+	pr_info("%s accelerometer driver exit\n", LSM330_ACC_DEV_NAME);
+#endif /* DEBUG */
+	i2c_del_driver(&lsm330_acc_driver);
+	return;
+}
+
+module_init(lsm330_acc_init);
+module_exit(lsm330_acc_exit);
+
+MODULE_DESCRIPTION("lsm330 accelerometer driver");
+MODULE_AUTHOR("Matteo Dameno, Denis Ciocca, STMicroelectronics");
+MODULE_LICENSE("GPL");
+
Index: git/drivers/input/misc/lsm330_gyr.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ git/drivers/input/misc/lsm330_gyr.c	2015-07-15 12:47:23.533391100 +0200
@@ -0,0 +1,1595 @@
+/******************** (C) COPYRIGHT 2012 STMicroelectronics ********************
+*
+* File Name		: lsm330_gyr_sysfs.c
+* Authors		: MEMS Motion Sensors Products Div- Application Team
+*			: Matteo Dameno (matteo.dameno@st.com)
+*			: Denis Ciocca (denis.ciocca@st.com)
+*			: Both authors are willing to be considered the
+*			: contact and update points for the driver.
+* Version		: V.1.0.2
+* Date			: 2012/Oct/15
+* Description		: LSM330 gyroscope driver
+*
+********************************************************************************
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License version 2 as
+* published by the Free Software Foundation.
+*
+* THE PRESENT SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES
+* OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, FOR THE SOLE
+* PURPOSE TO SUPPORT YOUR APPLICATION DEVELOPMENT.
+* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
+* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
+* CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
+* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
+*
+ ******************************************************************************
+Version History.
+	V 1.0.0		First Release
+	V 1.0.2		I2C address bugfix
+ ******************************************************************************/
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/mutex.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/gpio.h>
+#include <linux/slab.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/stat.h>
+
+#include <linux/input/lsm330.h>
+/*#include "lsm330.h"*/
+
+
+#define LSM330_GYR_ENABLED		1
+#define LSM330_GYR_DISABLED		0
+
+/** Maximum polled-device-reported rot speed value value in dps*/
+#define FS_MAX				32768
+
+/* lsm330 gyroscope registers */
+#define WHO_AM_I			(0x0F)
+
+#define SENSITIVITY_250			8750		/*	udps/LSB */
+#define SENSITIVITY_500			17500		/*	udps/LSB */
+#define SENSITIVITY_2000		70000		/*	udps/LSB */
+
+#define CTRL_REG1			(0x20)    /* CTRL REG1 */
+#define CTRL_REG2			(0x21)    /* CTRL REG2 */
+#define CTRL_REG3			(0x22)    /* CTRL_REG3 */
+#define CTRL_REG4			(0x23)    /* CTRL_REG4 */
+#define CTRL_REG5			(0x24)    /* CTRL_REG5 */
+#define	REFERENCE			(0x25)    /* REFERENCE REG */
+#define	FIFO_CTRL_REG			(0x2E)    /* FIFO CONTROL REGISTER */
+#define FIFO_SRC_REG			(0x2F)    /* FIFO SOURCE REGISTER */
+#define	OUT_X_L				(0x28)    /* 1st AXIS OUT REG of 6 */
+
+#define AXISDATA_REG			OUT_X_L
+
+/* CTRL_REG1 */
+#define ALL_ZEROES			(0x00)
+#define PM_OFF				(0x00)
+#define PM_NORMAL			(0x08)
+#define ENABLE_ALL_AXES			(0x07)
+#define ENABLE_NO_AXES			(0x00)
+#define BW00				(0x00)
+#define BW01				(0x10)
+#define BW10				(0x20)
+#define BW11				(0x30)
+#define ODR095				(0x00)  /* ODR =  95Hz */
+#define ODR190				(0x40)  /* ODR = 190Hz */
+#define ODR380				(0x80)  /* ODR = 380Hz */
+#define ODR760				(0xC0)  /* ODR = 760Hz */
+
+/* CTRL_REG3 bits */
+#define	I2_DRDY				(0x08)
+#define	I2_WTM				(0x04)
+#define	I2_OVRUN			(0x02)
+#define	I2_EMPTY			(0x01)
+#define	I2_NONE				(0x00)
+#define	I2_MASK				(0x0F)
+
+/* CTRL_REG4 bits */
+#define	FS_MASK				(0x30)
+#define	BDU_ENABLE			(0x80)
+
+/* CTRL_REG5 bits */
+#define	FIFO_ENABLE			(0x40)
+#define HPF_ENALBE			(0x11)
+
+/* FIFO_CTRL_REG bits */
+#define	FIFO_MODE_MASK			(0xE0)
+#define	FIFO_MODE_BYPASS		(0x00)
+#define	FIFO_MODE_FIFO			(0x20)
+#define	FIFO_MODE_STREAM		(0x40)
+#define	FIFO_MODE_STR2FIFO		(0x60)
+#define	FIFO_MODE_BYPASS2STR		(0x80)
+#define	FIFO_WATERMARK_MASK		(0x1F)
+
+#define FIFO_STORED_DATA_MASK		(0x1F)
+
+#define I2C_AUTO_INCREMENT		(0x80)
+
+/* RESUME STATE INDICES */
+#define	RES_CTRL_REG1			0
+#define	RES_CTRL_REG2			1
+#define	RES_CTRL_REG3			2
+#define	RES_CTRL_REG4			3
+#define	RES_CTRL_REG5			4
+#define	RES_FIFO_CTRL_REG		5
+#define	RESUME_ENTRIES			6
+
+/** Registers Contents */
+#define WHOAMI_LSM330_GYR		0xD4  /* Expected content for WAI */
+
+static int int1_gpio = LSM330_GYR_DEFAULT_INT1_GPIO;
+static int int2_gpio = LSM330_GYR_DEFAULT_INT2_GPIO;
+/* module_param(int1_gpio, int, S_IRUGO); */
+
+struct lsm330_gyr_triple {
+	short	x,	/* x-axis angular rate data. */
+			y,	/* y-axis angluar rate data. */
+			z;	/* z-axis angular rate data. */
+};
+
+struct output_rate {
+	int poll_rate_ms;
+	u8 mask;
+};
+
+static const struct output_rate odr_table[] = {
+
+	{	2,	ODR760|BW10},
+	{	3,	ODR380|BW01},
+	{	6,	ODR190|BW00},
+	{	11,	ODR095|BW00},
+};
+
+static struct lsm330_gyr_platform_data default_lsm330_gyr_pdata = {
+	.fs_range = LSM330_GYR_FS_250DPS,
+	.axis_map_x = 0,
+	.axis_map_y = 1,
+	.axis_map_z = 2,
+	.negate_x = 0,
+	.negate_y = 0,
+	.negate_z = 0,
+
+	.poll_interval = 100,
+	.min_interval = LSM330_GYR_MIN_POLL_PERIOD_MS, /* 2ms */
+
+	.gpio_int1 = LSM330_GYR_DEFAULT_INT1_GPIO,
+	.gpio_int2 = LSM330_GYR_DEFAULT_INT2_GPIO,	/* int for fifo */
+
+};
+
+struct lsm330_gyr_status {
+	struct i2c_client *client;
+	struct lsm330_gyr_platform_data *pdata;
+
+	struct mutex lock;
+
+	struct input_dev *input_dev;
+	struct delayed_work input_work;
+
+	int hw_initialized;
+	atomic_t enabled;
+	int use_smbus;
+
+	u8 reg_addr;
+	u8 resume_state[RESUME_ENTRIES];
+
+	u32 sensitivity;
+
+	/* interrupt related */
+	int irq2;
+	struct work_struct irq2_work;
+	struct workqueue_struct *irq2_work_queue;
+
+	/* fifo related */
+	u8 watermark;
+	u8 fifomode;
+};
+
+
+static int lsm330_gyr_i2c_read(struct lsm330_gyr_status *stat, u8 *buf,
+								int len)
+{
+	int ret;
+	u8 reg = buf[0];
+	u8 cmd = reg;
+
+	if (len > 1)
+		cmd = (I2C_AUTO_INCREMENT | reg);
+	if (stat->use_smbus) {
+		if (len == 1) {
+			ret = i2c_smbus_read_byte_data(stat->client, cmd);
+			buf[0] = ret & 0xff;
+#ifdef DEBUG
+			dev_warn(&stat->client->dev,
+				"i2c_smbus_read_byte_data: ret=0x%02x, len:%d ,"
+				"command=0x%02x, buf[0]=0x%02x\n",
+				ret, len, cmd , buf[0]);
+#endif
+		} else if (len > 1) {
+			ret = i2c_smbus_read_i2c_block_data(stat->client,
+								cmd, len, buf);
+#ifdef DEBUG
+			dev_warn(&stat->client->dev,
+				"i2c_smbus_read_i2c_block_data: ret:%d len:%d, "
+				"command=0x%02x, ",
+				ret, len, cmd);
+			unsigned int ii;
+			for (ii = 0; ii < len; ii++)
+				printk(KERN_DEBUG "buf[%d]=0x%02x,",
+								ii, buf[ii]);
+
+			printk("\n");
+#endif
+		} else
+			ret = -1;
+
+		if (ret < 0) {
+			dev_err(&stat->client->dev,
+				"read transfer error: len:%d, command=0x%02x\n",
+				len, cmd);
+			return 0; /* failure */
+		}
+		return len; /* success */
+	}
+
+	ret = i2c_master_send(stat->client, &cmd, sizeof(cmd));
+	if (ret != sizeof(cmd))
+		return ret;
+
+	return i2c_master_recv(stat->client, buf, len);
+}
+
+static int lsm330_gyr_i2c_write(struct lsm330_gyr_status *stat, u8 *buf,
+									int len)
+{
+	int ret;
+	u8 reg, value;
+
+	if (len > 1)
+		buf[0] = (I2C_AUTO_INCREMENT | buf[0]);
+
+	reg = buf[0];
+	value = buf[1];
+
+	if (stat->use_smbus) {
+		if (len == 1) {
+			ret = i2c_smbus_write_byte_data(stat->client,
+								reg, value);
+#ifdef DEBUG
+			dev_warn(&stat->client->dev,
+				"i2c_smbus_write_byte_data: ret=%d, len:%d, "
+				"command=0x%02x, value=0x%02x\n",
+				ret, len, reg , value);
+#endif
+			return ret;
+		} else if (len > 1) {
+			ret = i2c_smbus_write_i2c_block_data(stat->client,
+							reg, len, buf + 1);
+#ifdef DEBUG
+			dev_warn(&stat->client->dev,
+				"i2c_smbus_write_i2c_block_data: ret=%d, "
+				"len:%d, command=0x%02x, ",
+				ret, len, reg);
+			unsigned int ii;
+			for (ii = 0; ii < (len + 1); ii++)
+				printk(KERN_DEBUG "value[%d]=0x%02x,",
+								ii, buf[ii]);
+
+			printk("\n");
+#endif
+			return ret;
+		}
+	}
+
+	ret = i2c_master_send(stat->client, buf, len+1);
+	return (ret == len+1) ? 0 : ret;
+}
+
+
+static int lsm330_gyr_register_write(struct lsm330_gyr_status *stat, u8 *buf,
+		u8 reg_address, u8 new_value)
+{
+	int err;
+
+		/* Sets configuration register at reg_address
+		 *  NOTE: this is a straight overwrite  */
+		buf[0] = reg_address;
+		buf[1] = new_value;
+		err = lsm330_gyr_i2c_write(stat, buf, 1);
+		if (err < 0)
+			return err;
+
+	return err;
+}
+
+static int lsm330_gyr_register_read(struct lsm330_gyr_status *stat, u8 *buf,
+		u8 reg_address)
+{
+
+	int err = -1;
+	buf[0] = (reg_address);
+	err = lsm330_gyr_i2c_read(stat, buf, 1);
+	return err;
+}
+
+static int lsm330_gyr_register_update(struct lsm330_gyr_status *stat, u8 *buf,
+		u8 reg_address, u8 mask, u8 new_bit_values)
+{
+	int err = -1;
+	u8 init_val;
+	u8 updated_val;
+	err = lsm330_gyr_register_read(stat, buf, reg_address);
+	if (!(err < 0)) {
+		init_val = buf[0];
+		updated_val = ((mask & new_bit_values) | ((~mask) & init_val));
+		err = lsm330_gyr_register_write(stat, buf, reg_address,
+				updated_val);
+	}
+	return err;
+}
+
+
+static int lsm330_gyr_update_watermark(struct lsm330_gyr_status *stat,
+								u8 watermark)
+{
+	int res = 0;
+	u8 buf[2];
+	u8 new_value;
+
+	mutex_lock(&stat->lock);
+	new_value = (watermark % 0x20);
+	res = lsm330_gyr_register_update(stat, buf, FIFO_CTRL_REG,
+			 FIFO_WATERMARK_MASK, new_value);
+	if (res < 0) {
+		dev_err(&stat->client->dev, "failed to update watermark\n");
+		return res;
+	}
+	dev_dbg(&stat->client->dev, "%s new_value:0x%02x,watermark:0x%02x\n",
+						__func__, new_value, watermark);
+
+	stat->resume_state[RES_FIFO_CTRL_REG] =
+		((FIFO_WATERMARK_MASK & new_value) |
+		(~FIFO_WATERMARK_MASK &
+				stat->resume_state[RES_FIFO_CTRL_REG]));
+	stat->watermark = new_value;
+	mutex_unlock(&stat->lock);
+	return res;
+}
+
+static int lsm330_gyr_update_fifomode(struct lsm330_gyr_status *stat,
+								u8 fifomode)
+{
+	int res;
+	u8 buf[2];
+	u8 new_value;
+
+	new_value = fifomode;
+	res = lsm330_gyr_register_update(stat, buf, FIFO_CTRL_REG,
+					FIFO_MODE_MASK, new_value);
+	if (res < 0) {
+		dev_err(&stat->client->dev, "failed to update fifoMode\n");
+		return res;
+	}
+	/*
+	dev_dbg(&stat->client->dev, "new_value:0x%02x,prev fifomode:0x%02x\n",
+				__func__, new_value, stat->fifomode);
+	 */
+	stat->resume_state[RES_FIFO_CTRL_REG] =
+		((FIFO_MODE_MASK & new_value) |
+		(~FIFO_MODE_MASK &
+				stat->resume_state[RES_FIFO_CTRL_REG]));
+	stat->fifomode = new_value;
+
+	return res;
+}
+
+static int lsm330_gyr_fifo_reset(struct lsm330_gyr_status *stat)
+{
+	u8 oldmode;
+	int res;
+
+	oldmode = stat->fifomode;
+	res = lsm330_gyr_update_fifomode(stat, FIFO_MODE_BYPASS);
+	if (res < 0)
+		return res;
+	res = lsm330_gyr_update_fifomode(stat, oldmode);
+	if (res >= 0)
+		dev_dbg(&stat->client->dev, "%s fifo reset to: 0x%02x\n",
+							__func__, oldmode);
+
+	return res;
+}
+
+static int lsm330_gyr_fifo_hwenable(struct lsm330_gyr_status *stat,
+								u8 enable)
+{
+	int res;
+	u8 buf[2];
+	u8 set = 0x00;
+	if (enable)
+		set = FIFO_ENABLE;
+	res = lsm330_gyr_register_update(stat, buf, CTRL_REG5,
+			FIFO_ENABLE, set);
+	if (res < 0) {
+		dev_err(&stat->client->dev, "fifo_hw switch to:0x%02x failed\n",
+									set);
+		return res;
+	}
+	stat->resume_state[RES_CTRL_REG5] =
+		((FIFO_ENABLE & set) |
+		(~FIFO_ENABLE & stat->resume_state[RES_CTRL_REG5]));
+	dev_dbg(&stat->client->dev, "%s set to:0x%02x\n", __func__, set);
+	return res;
+}
+
+static int lsm330_gyr_manage_int2settings(struct lsm330_gyr_status *stat,
+								u8 fifomode)
+{
+	int res;
+	u8 buf[2];
+	bool enable_fifo_hw;
+	bool recognized_mode = false;
+	u8 int2bits = I2_NONE;
+
+	switch (fifomode) {
+	case FIFO_MODE_FIFO:
+		recognized_mode = true;
+
+
+		int2bits = (I2_WTM | I2_OVRUN);
+		enable_fifo_hw = true;
+
+		res = lsm330_gyr_register_update(stat, buf, CTRL_REG3,
+					I2_MASK, int2bits);
+		if (res < 0) {
+			dev_err(&stat->client->dev, "%s : failed to update "
+							"CTRL_REG3:0x%02x\n",
+							__func__, fifomode);
+			goto err_mutex_unlock;
+		}
+		stat->resume_state[RES_CTRL_REG3] =
+			((I2_MASK & int2bits) |
+			(~(I2_MASK) & stat->resume_state[RES_CTRL_REG3]));
+		/* enable_fifo_hw = true; */
+		break;
+
+	case FIFO_MODE_BYPASS:
+		recognized_mode = true;
+
+
+		int2bits = I2_DRDY;
+
+		res = lsm330_gyr_register_update(stat, buf, CTRL_REG3,
+					I2_MASK, int2bits);
+		if (res < 0) {
+			dev_err(&stat->client->dev, "%s : failed to update"
+						" to CTRL_REG3:0x%02x\n",
+							__func__, fifomode);
+			goto err_mutex_unlock;
+		}
+		stat->resume_state[RES_CTRL_REG3] =
+			((I2_MASK & int2bits) |
+			(~I2_MASK & stat->resume_state[RES_CTRL_REG3]));
+		enable_fifo_hw = false;
+		break;
+
+	default:
+		recognized_mode = false;
+		res = lsm330_gyr_register_update(stat, buf, CTRL_REG3,
+					I2_MASK, I2_NONE);
+		if (res < 0) {
+			dev_err(&stat->client->dev, "%s : failed to update "
+						"CTRL_REG3:0x%02x\n",
+						__func__, fifomode);
+			goto err_mutex_unlock;
+		}
+		enable_fifo_hw = false;
+		stat->resume_state[RES_CTRL_REG3] =
+			((I2_MASK & 0x00) |
+			(~I2_MASK & stat->resume_state[RES_CTRL_REG3]));
+		break;
+
+	}
+	if (recognized_mode) {
+		res = lsm330_gyr_update_fifomode(stat, fifomode);
+		if (res < 0) {
+			dev_err(&stat->client->dev, "%s : failed to "
+						"set fifoMode\n", __func__);
+			goto err_mutex_unlock;
+		}
+	}
+	res = lsm330_gyr_fifo_hwenable(stat, enable_fifo_hw);
+
+err_mutex_unlock:
+
+	return res;
+}
+
+
+static int lsm330_gyr_update_fs_range(struct lsm330_gyr_status *stat,
+							u8 new_fs)
+{
+	int res ;
+	u8 buf[2];
+
+	u32 sensitivity;
+
+	switch(new_fs) {
+		case LSM330_GYR_FS_250DPS:
+			sensitivity = SENSITIVITY_250;
+			break;
+		case LSM330_GYR_FS_500DPS:
+			sensitivity = SENSITIVITY_500;
+			break;
+		case LSM330_GYR_FS_2000DPS:
+			sensitivity = SENSITIVITY_2000;
+			break;
+		default:
+			dev_err(&stat->client->dev, "invalid g range "
+						"requested: %u\n", new_fs);
+			return -EINVAL;
+	}
+
+
+	buf[0] = CTRL_REG4;
+
+	res = lsm330_gyr_register_update(stat, buf, CTRL_REG4,
+							FS_MASK, new_fs);
+
+	if (res < 0) {
+		dev_err(&stat->client->dev, "%s : failed to update fs:0x%02x\n",
+							__func__, new_fs);
+		return res;
+	}
+	stat->resume_state[RES_CTRL_REG4] =
+		((FS_MASK & new_fs) |
+		(~FS_MASK & stat->resume_state[RES_CTRL_REG4]));
+
+	stat->sensitivity = sensitivity;
+	return res;
+}
+
+
+static int lsm330_gyr_update_odr(struct lsm330_gyr_status *stat,
+			unsigned int poll_interval_ms)
+{
+	int err = -1;
+	int i;
+	u8 config[2];
+
+	for(i = ARRAY_SIZE(odr_table) - 1; i >= 0; i--) {
+		if(odr_table[i].poll_rate_ms <= poll_interval_ms)
+			break;
+	}
+
+	config[1] = odr_table[i].mask;
+	config[1] |= (ENABLE_ALL_AXES + PM_NORMAL);
+
+	/* If device is currently enabled, we need to write new
+	 *  configuration out to it */
+	if (atomic_read(&stat->enabled)) {
+		config[0] = CTRL_REG1;
+		err = lsm330_gyr_i2c_write(stat, config, 1);
+		if (err < 0)
+			return err;
+		stat->resume_state[RES_CTRL_REG1] = config[1];
+	}
+
+
+	return err;
+}
+
+/* gyroscope data readout */
+static int lsm330_gyr_get_data(struct lsm330_gyr_status *stat,
+			     struct lsm330_gyr_triple *data)
+{
+	int err;
+	unsigned char gyro_out[6];
+	/* y,p,r hardware data */
+	s16 hw_d[3] = { 0 };
+
+	gyro_out[0] = (AXISDATA_REG);
+
+	err = lsm330_gyr_i2c_read(stat, gyro_out, 6);
+
+	if (err < 0)
+		return err;
+
+	hw_d[0] = (s16) (((gyro_out[1]) << 8) | gyro_out[0]);
+	hw_d[1] = (s16) (((gyro_out[3]) << 8) | gyro_out[2]);
+	hw_d[2] = (s16) (((gyro_out[5]) << 8) | gyro_out[4]);
+
+	//hw_d[0] = hw_d[0] * stat->sensitivity;
+	//hw_d[1] = hw_d[1] * stat->sensitivity;
+	//hw_d[2] = hw_d[2] * stat->sensitivity;
+
+	data->x = ((stat->pdata->negate_x) ? (-hw_d[stat->pdata->axis_map_x])
+		   : (hw_d[stat->pdata->axis_map_x]));
+	data->y = ((stat->pdata->negate_y) ? (-hw_d[stat->pdata->axis_map_y])
+		   : (hw_d[stat->pdata->axis_map_y]));
+	data->z = ((stat->pdata->negate_z) ? (-hw_d[stat->pdata->axis_map_z])
+		   : (hw_d[stat->pdata->axis_map_z]));
+
+#ifdef DEBUG
+	/* dev_info(&stat->client->dev, "gyro_out: x = %d, y = %d, z = %d\n",
+		data->x, data->y, data->z); */
+#endif
+
+	return err;
+}
+
+static void lsm330_gyr_report_values(struct lsm330_gyr_status *stat,
+						struct lsm330_gyr_triple *data)
+{
+	input_report_abs(stat->input_dev, ABS_X, data->x);
+	input_report_abs(stat->input_dev, ABS_Y, data->y);
+	input_report_abs(stat->input_dev, ABS_Z, data->z);
+	input_sync(stat->input_dev);
+}
+
+static int lsm330_gyr_hw_init(struct lsm330_gyr_status *stat)
+{
+	int err;
+	u8 buf[6];
+
+	dev_info(&stat->client->dev, "hw init\n");
+
+	buf[0] = (CTRL_REG1);
+	buf[1] = stat->resume_state[RES_CTRL_REG1];
+	buf[2] = stat->resume_state[RES_CTRL_REG2];
+	buf[3] = stat->resume_state[RES_CTRL_REG3];
+	buf[4] = stat->resume_state[RES_CTRL_REG4];
+	buf[5] = stat->resume_state[RES_CTRL_REG5];
+
+	err = lsm330_gyr_i2c_write(stat, buf, 5);
+	if (err < 0)
+		return err;
+
+	buf[0] = (FIFO_CTRL_REG);
+	buf[1] = stat->resume_state[RES_FIFO_CTRL_REG];
+	err = lsm330_gyr_i2c_write(stat, buf, 1);
+	if (err < 0)
+			return err;
+
+	stat->hw_initialized = 1;
+
+	return err;
+}
+
+static void lsm330_gyr_device_power_off(struct lsm330_gyr_status *stat)
+{
+	int err;
+	u8 buf[2];
+
+	dev_info(&stat->client->dev, "power off\n");
+
+	buf[0] = (CTRL_REG1);
+	buf[1] = (PM_OFF);
+	err = lsm330_gyr_i2c_write(stat, buf, 1);
+	if (err < 0)
+		dev_err(&stat->client->dev, "soft power off failed\n");
+
+	if (stat->pdata->power_off) {
+		/* disable_irq_nosync(acc->irq1); */
+		disable_irq_nosync(stat->irq2);
+		stat->pdata->power_off();
+		stat->hw_initialized = 0;
+	}
+
+	if (stat->hw_initialized) {
+		/*if (stat->pdata->gpio_int1 >= 0)*/
+		/*	disable_irq_nosync(stat->irq1);*/
+		if (stat->pdata->gpio_int2 >= 0) {
+			disable_irq_nosync(stat->irq2);
+			dev_info(&stat->client->dev,
+					"power off: irq2 disabled\n");
+		}
+		stat->hw_initialized = 0;
+	}
+}
+
+static int lsm330_gyr_device_power_on(struct lsm330_gyr_status *stat)
+{
+	int err;
+
+	if (stat->pdata->power_on) {
+		err = stat->pdata->power_on();
+		if (err < 0)
+			return err;
+		if (stat->pdata->gpio_int2 >= 0)
+			enable_irq(stat->irq2);
+	}
+
+
+	if (!stat->hw_initialized) {
+		err = lsm330_gyr_hw_init(stat);
+		if (err < 0) {
+			lsm330_gyr_device_power_off(stat);
+			return err;
+		}
+	}
+
+	if (stat->hw_initialized) {
+		/* if (stat->pdata->gpio_int1) {
+			enable_irq(stat->irq1);
+			dev_info(&stat->client->dev,
+						"power on: irq1 enabled\n");
+		} */
+		dev_dbg(&stat->client->dev, "stat->pdata->gpio_int2 = %d\n",
+						stat->pdata->gpio_int2);
+		if (stat->pdata->gpio_int2 >= 0) {
+			enable_irq(stat->irq2);
+			dev_info(&stat->client->dev,
+					"power on: irq2 enabled\n");
+		}
+	}
+
+	return 0;
+}
+
+static int lsm330_gyr_enable(struct lsm330_gyr_status *stat)
+{
+	int err;
+
+	if (!atomic_cmpxchg(&stat->enabled, 0, 1)) {
+
+		err = lsm330_gyr_device_power_on(stat);
+		if (err < 0) {
+			atomic_set(&stat->enabled, 0);
+			return err;
+		}
+
+		schedule_delayed_work(&stat->input_work,
+				msecs_to_jiffies(stat->pdata->poll_interval));
+	}
+
+	return 0;
+}
+
+static int lsm330_gyr_disable(struct lsm330_gyr_status *stat)
+{
+	int err;
+	dev_dbg(&stat->client->dev, "%s: stat->enabled = %d\n", __func__,
+						atomic_read(&stat->enabled));
+
+	if (atomic_cmpxchg(&stat->enabled, 1, 0)) {
+		cancel_delayed_work_sync(&stat->input_work);
+		lsm330_gyr_device_power_off(stat);
+		dev_dbg(&stat->client->dev, "%s: cancel_delayed_work_sync "
+						"result: %d", __func__, err);
+	}
+	return 0;
+}
+
+static ssize_t attr_polling_rate_show(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	int val;
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	mutex_lock(&stat->lock);
+	val = stat->pdata->poll_interval;
+	mutex_unlock(&stat->lock);
+	return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t attr_polling_rate_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t size)
+{
+	int err;
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long interval_ms;
+
+	if (strict_strtoul(buf, 10, &interval_ms))
+		return -EINVAL;
+	if (!interval_ms)
+		return -EINVAL;
+
+	mutex_lock(&stat->lock);
+	err = lsm330_gyr_update_odr(stat, interval_ms);
+	if(err >= 0)
+		stat->pdata->poll_interval = interval_ms;
+	mutex_unlock(&stat->lock);
+	return size;
+}
+
+static ssize_t attr_range_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	int range = 0;
+	u8 val;
+	mutex_lock(&stat->lock);
+	val = stat->pdata->fs_range;
+
+	switch (val) {
+	case LSM330_GYR_FS_250DPS:
+		range = 250;
+		break;
+	case LSM330_GYR_FS_500DPS:
+		range = 500;
+		break;
+	case LSM330_GYR_FS_2000DPS:
+		range = 2000;
+		break;
+	}
+	mutex_unlock(&stat->lock);
+	/* return sprintf(buf, "0x%02x\n", val); */
+	return sprintf(buf, "%d\n", range);
+}
+
+static ssize_t attr_range_store(struct device *dev,
+			      struct device_attribute *attr,
+			      const char *buf, size_t size)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long val;
+	u8 range;
+	int err;
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+	switch (val) {
+	case 250:
+		range = LSM330_GYR_FS_250DPS;
+		break;
+	case 500:
+		range = LSM330_GYR_FS_500DPS;
+		break;
+	case 2000:
+		range = LSM330_GYR_FS_2000DPS;
+		break;
+	default:
+		dev_err(&stat->client->dev, "invalid range request: %lu,"
+				" discarded\n", val);
+		return -EINVAL;
+	}
+	mutex_lock(&stat->lock);
+	err = lsm330_gyr_update_fs_range(stat, range);
+	if (err >= 0)
+		stat->pdata->fs_range = range;
+	mutex_unlock(&stat->lock);
+	dev_info(&stat->client->dev, "range set to: %lu dps\n", val);
+	return size;
+}
+
+static ssize_t attr_enable_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	int val = atomic_read(&stat->enabled);
+	return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t attr_enable_store(struct device *dev,
+			       struct device_attribute *attr,
+			       const char *buf, size_t size)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long val;
+
+	if (strict_strtoul(buf, 10, &val))
+		return -EINVAL;
+
+	if (val)
+		lsm330_gyr_enable(stat);
+	else
+		lsm330_gyr_disable(stat);
+
+	return size;
+}
+
+static ssize_t attr_watermark_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t size)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long watermark;
+	int res;
+
+	if (strict_strtoul(buf, 16, &watermark))
+		return -EINVAL;
+
+	res = lsm330_gyr_update_watermark(stat, watermark);
+	if (res < 0)
+		return res;
+
+	return size;
+}
+
+static ssize_t attr_watermark_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	int val = stat->watermark;
+	return sprintf(buf, "0x%02x\n", val);
+}
+
+static ssize_t attr_fifomode_store(struct device *dev,
+				     struct device_attribute *attr,
+				     const char *buf, size_t size)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long fifomode;
+	int res;
+
+	if (strict_strtoul(buf, 16, &fifomode))
+		return -EINVAL;
+	/* if (!fifomode)
+		return -EINVAL; */
+
+	dev_dbg(dev, "%s, got value:0x%02x\n", __func__, (u8)fifomode);
+
+	mutex_lock(&stat->lock);
+	res = lsm330_gyr_manage_int2settings(stat, (u8) fifomode);
+	mutex_unlock(&stat->lock);
+
+	if (res < 0)
+		return res;
+	return size;
+}
+
+static ssize_t attr_fifomode_show(struct device *dev,
+			       struct device_attribute *attr, char *buf)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	u8 val = stat->fifomode;
+	return sprintf(buf, "0x%02x\n", val);
+}
+
+#ifdef DEBUG
+static ssize_t attr_reg_set(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	int rc;
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	u8 x[2];
+	unsigned long val;
+
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+	mutex_lock(&stat->lock);
+	x[0] = stat->reg_addr;
+	mutex_unlock(&stat->lock);
+	x[1] = val;
+	rc = lsm330_gyr_i2c_write(stat, x, 1);
+	return size;
+}
+
+static ssize_t attr_reg_get(struct device *dev, struct device_attribute *attr,
+				char *buf)
+{
+	ssize_t ret;
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	int rc;
+	u8 data;
+
+	mutex_lock(&stat->lock);
+	data = stat->reg_addr;
+	mutex_unlock(&stat->lock);
+	rc = lsm330_gyr_i2c_read(stat, &data, 1);
+	ret = sprintf(buf, "0x%02x\n", data);
+	return ret;
+}
+
+static ssize_t attr_addr_set(struct device *dev, struct device_attribute *attr,
+				const char *buf, size_t size)
+{
+	struct lsm330_gyr_status *stat = dev_get_drvdata(dev);
+	unsigned long val;
+
+	if (strict_strtoul(buf, 16, &val))
+		return -EINVAL;
+
+	mutex_lock(&stat->lock);
+
+	stat->reg_addr = val;
+
+	mutex_unlock(&stat->lock);
+
+	return size;
+}
+#endif /* DEBUG */
+
+static struct device_attribute attributes[] = {
+	__ATTR(pollrate_ms, 0666, attr_polling_rate_show,
+						attr_polling_rate_store),
+	__ATTR(range, 0666, attr_range_show, attr_range_store),
+	__ATTR(enable_device, 0666, attr_enable_show, attr_enable_store),
+	__ATTR(fifo_samples, 0666, attr_watermark_show, attr_watermark_store),
+	__ATTR(fifo_mode, 0666, attr_fifomode_show, attr_fifomode_store),
+#ifdef DEBUG
+	__ATTR(reg_value, 0600, attr_reg_get, attr_reg_set),
+	__ATTR(reg_addr, 0200, NULL, attr_addr_set),
+#endif
+};
+
+static int create_sysfs_interfaces(struct device *dev)
+{
+	int i;
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		if (device_create_file(dev, attributes + i))
+			goto error;
+	return 0;
+
+error:
+	for (; i >= 0; i--)
+		device_remove_file(dev, attributes + i);
+	dev_err(dev, "%s:Unable to create interface\n", __func__);
+	return -1;
+}
+
+static int remove_sysfs_interfaces(struct device *dev)
+{
+	int i;
+	for (i = 0; i < ARRAY_SIZE(attributes); i++)
+		device_remove_file(dev, attributes + i);
+	return 0;
+}
+
+static void lsm330_gyr_report_triple(struct lsm330_gyr_status *stat)
+{
+	int err;
+	struct lsm330_gyr_triple data_out;
+
+	err = lsm330_gyr_get_data(stat, &data_out);
+	if (err < 0)
+		dev_err(&stat->client->dev, "get_gyroscope_data failed\n");
+	else
+		lsm330_gyr_report_values(stat, &data_out);
+}
+
+static void lsm330_gyr_irq2_fifo(struct lsm330_gyr_status *stat)
+{
+	int err;
+	u8 buf[2];
+	u8 int_source;
+	u8 samples;
+	u8 workingmode;
+	u8 stored_samples;
+
+	mutex_lock(&stat->lock);
+
+	workingmode = stat->fifomode;
+
+
+	dev_dbg(&stat->client->dev, "%s : fifomode:0x%02x\n", __func__,
+								workingmode);
+
+
+	switch (workingmode) {
+	case FIFO_MODE_BYPASS:
+	{
+		dev_dbg(&stat->client->dev, "%s : fifomode:0x%02x\n", __func__,
+							stat->fifomode);
+		lsm330_gyr_report_triple(stat);
+		break;
+	}
+	case FIFO_MODE_FIFO:
+		samples = (stat->watermark)+1;
+		dev_dbg(&stat->client->dev,
+			"%s : FIFO_SRC_REG init samples:%d\n",
+							__func__, samples);
+		err = lsm330_gyr_register_read(stat, buf, FIFO_SRC_REG);
+		if (err < 0)
+			dev_err(&stat->client->dev,
+					"error reading fifo source reg\n");
+
+		int_source = buf[0];
+		dev_dbg(&stat->client->dev, "%s :FIFO_SRC_REG content:0x%02x\n",
+							__func__, int_source);
+
+		stored_samples = int_source & FIFO_STORED_DATA_MASK;
+		dev_dbg(&stat->client->dev, "%s : fifomode:0x%02x\n", __func__,
+						stat->fifomode);
+
+		dev_dbg(&stat->client->dev, "%s : samples:%d stored:%d\n",
+				__func__, samples, stored_samples);
+
+		for (; samples > 0; samples--) {
+			dev_dbg(&stat->client->dev, "%s : current sample:%d\n",
+							__func__, samples);
+
+			lsm330_gyr_report_triple(stat);
+
+		}
+		lsm330_gyr_fifo_reset(stat);
+		break;
+	}
+
+	mutex_unlock(&stat->lock);
+}
+
+static irqreturn_t lsm330_gyr_isr2(int irq, void *dev)
+{
+	struct lsm330_gyr_status *stat = dev;
+
+	disable_irq_nosync(irq);
+	queue_work(stat->irq2_work_queue, &stat->irq2_work);
+	pr_debug("%s %s: isr2 queued\n", LSM330_GYR_DEV_NAME, __func__);
+
+	return IRQ_HANDLED;
+}
+
+static void lsm330_gyr_irq2_work_func(struct work_struct *work)
+{
+
+	struct lsm330_gyr_status *stat;
+	stat = container_of(work, struct lsm330_gyr_status, irq2_work);
+	/* TODO  add interrupt service procedure.
+		 ie:lsm330_gyr_irq2_XXX(stat); */
+	lsm330_gyr_irq2_fifo(stat);
+	/*  */
+	pr_debug("%s %s: IRQ2 served\n", LSM330_GYR_DEV_NAME, __func__);
+/* exit: */
+	enable_irq(stat->irq2);
+}
+
+static void lsm330_gyr_input_work_func(struct work_struct *work)
+{
+	struct lsm330_gyr_status *stat;
+	struct lsm330_gyr_triple data_out;
+	int err;
+
+	stat = container_of(work, struct lsm330_gyr_status, input_work);
+
+	mutex_lock(&stat->lock);
+	err = lsm330_gyr_get_data(stat, &data_out);
+	if (err < 0)
+		dev_err(&stat->client->dev, "get_acceleration_data failed\n");
+	else
+		lsm330_gyr_report_values(stat, &data_out);
+
+	schedule_delayed_work(&stat->input_work, msecs_to_jiffies(
+			stat->pdata->poll_interval));
+	mutex_unlock(&stat->lock);
+}
+
+int lsm330_gyr_input_open(struct input_dev *input)
+{
+	struct lsm330_gyr_status *stat = input_get_drvdata(input);
+	dev_dbg(&stat->client->dev, "%s\n", __func__);
+	return lsm330_gyr_enable(stat);
+}
+
+void lsm330_gyr_input_close(struct input_dev *dev)
+{
+	struct lsm330_gyr_status *stat = input_get_drvdata(dev);
+	dev_dbg(&stat->client->dev, "%s\n", __func__);
+	lsm330_gyr_disable(stat);
+}
+
+static int lsm330_gyr_validate_pdata(struct lsm330_gyr_status *stat)
+{
+	/* checks for correctness of minimal polling period */
+	stat->pdata->min_interval =
+		max((unsigned int) LSM330_GYR_MIN_POLL_PERIOD_MS,
+						stat->pdata->min_interval);
+
+	stat->pdata->poll_interval = max(stat->pdata->poll_interval,
+			stat->pdata->min_interval);
+
+	if (stat->pdata->axis_map_x > 2 ||
+	    stat->pdata->axis_map_y > 2 ||
+	    stat->pdata->axis_map_z > 2) {
+		dev_err(&stat->client->dev,
+			"invalid axis_map value x:%u y:%u z%u\n",
+			stat->pdata->axis_map_x,
+			stat->pdata->axis_map_y,
+			stat->pdata->axis_map_z);
+		return -EINVAL;
+	}
+
+	/* Only allow 0 and 1 for negation boolean flag */
+	if (stat->pdata->negate_x > 1 ||
+	    stat->pdata->negate_y > 1 ||
+	    stat->pdata->negate_z > 1) {
+		dev_err(&stat->client->dev,
+			"invalid negate value x:%u y:%u z:%u\n",
+			stat->pdata->negate_x,
+			stat->pdata->negate_y,
+			stat->pdata->negate_z);
+		return -EINVAL;
+	}
+
+	/* Enforce minimum polling interval */
+	if (stat->pdata->poll_interval < stat->pdata->min_interval) {
+		dev_err(&stat->client->dev,
+			"minimum poll interval violated\n");
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int lsm330_gyr_input_init(struct lsm330_gyr_status *stat)
+{
+	int err = -1;
+
+	dev_dbg(&stat->client->dev, "%s\n", __func__);
+
+	INIT_DELAYED_WORK(&stat->input_work, lsm330_gyr_input_work_func);
+	stat->input_dev = input_allocate_device();
+	if (!stat->input_dev) {
+		err = -ENOMEM;
+		dev_err(&stat->client->dev,
+			"input device allocation failed\n");
+		goto err0;
+	}
+
+	stat->input_dev->open = lsm330_gyr_input_open;
+	stat->input_dev->close = lsm330_gyr_input_close;
+	stat->input_dev->name = LSM330_GYR_DEV_NAME;
+
+	stat->input_dev->id.bustype = BUS_I2C;
+	stat->input_dev->dev.parent = &stat->client->dev;
+
+	input_set_drvdata(stat->input_dev, stat);
+
+	set_bit(EV_ABS, stat->input_dev->evbit);
+
+
+	input_set_abs_params(stat->input_dev, ABS_X, -FS_MAX-1, FS_MAX, 0, 0);
+	input_set_abs_params(stat->input_dev, ABS_Y, -FS_MAX-1, FS_MAX, 0, 0);
+	input_set_abs_params(stat->input_dev, ABS_Z, -FS_MAX-1, FS_MAX, 0, 0);
+
+
+	err = input_register_device(stat->input_dev);
+	if (err) {
+		dev_err(&stat->client->dev,
+			"unable to register input polled device %s\n",
+			stat->input_dev->name);
+		goto err1;
+	}
+
+	return 0;
+
+err1:
+	input_free_device(stat->input_dev);
+err0:
+	return err;
+}
+
+static void lsm330_gyr_input_cleanup(struct lsm330_gyr_status *stat)
+{
+	input_unregister_device(stat->input_dev);
+	input_free_device(stat->input_dev);
+}
+
+static int lsm330_gyr_probe(struct i2c_client *client,
+					const struct i2c_device_id *devid)
+{
+	struct lsm330_gyr_status *stat;
+
+	u32 smbus_func = I2C_FUNC_SMBUS_BYTE_DATA |
+			I2C_FUNC_SMBUS_WORD_DATA | I2C_FUNC_SMBUS_I2C_BLOCK ;
+
+	int err = -1;
+
+	dev_info(&client->dev, "probe start.\n");
+
+
+	stat = kzalloc(sizeof(*stat), GFP_KERNEL);
+	if (stat == NULL) {
+		dev_err(&client->dev,
+			"failed to allocate memory for module data\n");
+		err = -ENOMEM;
+		goto err0;
+	}
+
+
+	/* Support for both I2C and SMBUS adapter interfaces. */
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_warn(&client->dev, "client not i2c capable\n");
+		if (i2c_check_functionality(client->adapter, smbus_func)) {
+			stat->use_smbus = 1;
+			dev_warn(&client->dev, "client using SMBUS\n");
+		} else {
+			err = -ENODEV;
+			dev_err(&client->dev, "client nor SMBUS capable\n");
+			stat->use_smbus = 0;
+			goto err0;
+		}
+	}
+
+	mutex_init(&stat->lock);
+	mutex_lock(&stat->lock);
+	stat->client = client;
+
+	stat->pdata = kmalloc(sizeof(*stat->pdata), GFP_KERNEL);
+	if (stat->pdata == NULL) {
+		dev_err(&client->dev,
+			"failed to allocate memory for pdata: %d\n", err);
+		goto err1;
+	}
+
+	if (client->dev.platform_data == NULL) {
+		default_lsm330_gyr_pdata.gpio_int1 = int1_gpio;
+		default_lsm330_gyr_pdata.gpio_int2 = int2_gpio;
+		memcpy(stat->pdata, &default_lsm330_gyr_pdata,
+							sizeof(*stat->pdata));
+		dev_info(&client->dev, "using default plaform_data\n");
+	} else {
+		memcpy(stat->pdata, client->dev.platform_data,
+						sizeof(*stat->pdata));
+	}
+
+	err = lsm330_gyr_validate_pdata(stat);
+	if (err < 0) {
+		dev_err(&client->dev, "failed to validate platform data\n");
+		goto err1_1;
+	}
+
+	i2c_set_clientdata(client, stat);
+
+	if (stat->pdata->init) {
+		err = stat->pdata->init();
+		if (err < 0) {
+			dev_err(&client->dev, "init failed: %d\n", err);
+			goto err1_1;
+		}
+	}
+
+
+	memset(stat->resume_state, 0, ARRAY_SIZE(stat->resume_state));
+
+	stat->resume_state[RES_CTRL_REG1] = ALL_ZEROES | ENABLE_ALL_AXES
+								| PM_NORMAL;
+	stat->resume_state[RES_CTRL_REG2] = ALL_ZEROES;
+	stat->resume_state[RES_CTRL_REG3] = ALL_ZEROES;
+	stat->resume_state[RES_CTRL_REG4] = ALL_ZEROES | BDU_ENABLE;
+	stat->resume_state[RES_CTRL_REG5] = ALL_ZEROES;
+	stat->resume_state[RES_FIFO_CTRL_REG] = ALL_ZEROES;
+
+	err = lsm330_gyr_device_power_on(stat);
+	if (err < 0) {
+		dev_err(&client->dev, "power on failed: %d\n", err);
+		goto err2;
+	}
+
+	atomic_set(&stat->enabled, 1);
+
+	err = lsm330_gyr_update_fs_range(stat, stat->pdata->fs_range);
+	if (err < 0) {
+		dev_err(&client->dev, "update_fs_range failed\n");
+		goto err2;
+	}
+
+	err = lsm330_gyr_update_odr(stat, stat->pdata->poll_interval);
+	if (err < 0) {
+		dev_err(&client->dev, "update_odr failed\n");
+		goto err2;
+	}
+
+	err = lsm330_gyr_input_init(stat);
+	if (err < 0)
+		goto err3;
+
+	err = create_sysfs_interfaces(&client->dev);
+	if (err < 0) {
+		dev_err(&client->dev,
+			"%s device register failed\n", LSM330_GYR_DEV_NAME);
+		goto err4;
+	}
+
+	lsm330_gyr_device_power_off(stat);
+
+	/* As default, do not report information */
+	atomic_set(&stat->enabled, 0);
+
+
+	if (stat->pdata->gpio_int2 >= 0) {
+		stat->irq2 = gpio_to_irq(stat->pdata->gpio_int2);
+		dev_info(&client->dev, "%s: %s has set irq2 to irq:"
+						" %d mapped on gpio:%d\n",
+			LSM330_GYR_DEV_NAME, __func__, stat->irq2,
+							stat->pdata->gpio_int2);
+
+		INIT_WORK(&stat->irq2_work, lsm330_gyr_irq2_work_func);
+		stat->irq2_work_queue =
+			create_singlethread_workqueue("lsm330_gyr_irq2_wq");
+		if (!stat->irq2_work_queue) {
+			err = -ENOMEM;
+			dev_err(&client->dev, "cannot create "
+						"work queue2: %d\n", err);
+			goto err5;
+		}
+
+		err = request_irq(stat->irq2, lsm330_gyr_isr2,
+				IRQF_TRIGGER_HIGH, "lsm330_gyr_irq2", stat);
+
+		if (err < 0) {
+			dev_err(&client->dev, "request irq2 failed: %d\n", err);
+			goto err6;
+		}
+		disable_irq_nosync(stat->irq2);
+	}
+
+	mutex_unlock(&stat->lock);
+
+
+	dev_info(&client->dev, "%s probed: device created successfully\n",
+							LSM330_GYR_DEV_NAME);
+
+
+	return 0;
+
+/*err7:
+	free_irq(stat->irq2, stat);
+*/
+err6:
+	destroy_workqueue(stat->irq2_work_queue);
+err5:
+	lsm330_gyr_device_power_off(stat);
+	remove_sysfs_interfaces(&client->dev);
+err4:
+	lsm330_gyr_input_cleanup(stat);
+err3:
+	lsm330_gyr_device_power_off(stat);
+err2:
+	if (stat->pdata->exit)
+		stat->pdata->exit();
+err1_1:
+	mutex_unlock(&stat->lock);
+	kfree(stat->pdata);
+err1:
+	kfree(stat);
+err0:
+		pr_err("%s: Driver Initialization failed\n",
+							LSM330_GYR_DEV_NAME);
+		return err;
+}
+
+static int lsm330_gyr_remove(struct i2c_client *client)
+{
+	struct lsm330_gyr_status *stat = i2c_get_clientdata(client);
+
+	dev_info(&stat->client->dev, "driver removing\n");
+
+
+	/*
+	if (stat->pdata->gpio_int1 >= 0)
+	{
+		free_irq(stat->irq1, stat);
+		gpio_free(stat->pdata->gpio_int1);
+		destroy_workqueue(stat->irq1_work_queue);
+	}
+	*/
+	if (stat->pdata->gpio_int2 >= 0) {
+		free_irq(stat->irq2, stat);
+		gpio_free(stat->pdata->gpio_int2);
+		destroy_workqueue(stat->irq2_work_queue);
+	}
+
+	if (atomic_cmpxchg(&stat->enabled, 1, 0))
+				cancel_delayed_work_sync(&stat->input_work);
+
+	lsm330_gyr_disable(stat);
+	lsm330_gyr_input_cleanup(stat);
+
+	remove_sysfs_interfaces(&client->dev);
+
+	kfree(stat->pdata);
+	kfree(stat);
+	return 0;
+}
+
+static int lsm330_gyr_suspend(struct device *dev)
+{
+	int err = 0;
+#define SLEEP
+#ifdef CONFIG_PM
+	struct i2c_client *client = to_i2c_client(dev);
+	struct lsm330_gyr_status *stat = i2c_get_clientdata(client);
+	u8 buf[2];
+
+	dev_info(&client->dev, "suspend\n");
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+	if (atomic_read(&stat->enabled)) {
+		mutex_lock(&stat->lock);
+
+		cancel_delayed_work_sync(&stat->input_work);
+
+#ifdef SLEEP
+		err = lsm330_gyr_register_update(stat, buf, CTRL_REG1,
+				0x0F, (ENABLE_NO_AXES | PM_NORMAL));
+#else
+		err = lsm330_gyr_register_update(stat, buf, CTRL_REG1,
+				0x08, PM_OFF);
+#endif /*SLEEP*/
+		mutex_unlock(&stat->lock);
+	}
+#endif /*CONFIG_PM*/
+	return err;
+}
+
+static int lsm330_gyr_resume(struct device *dev)
+{
+	int err = 0;
+#ifdef CONFIG_PM
+	struct i2c_client *client = to_i2c_client(dev);
+	struct lsm330_gyr_status *stat = i2c_get_clientdata(client);
+	u8 buf[2];
+
+
+	dev_info(&client->dev, "resume\n");
+
+	dev_dbg(&client->dev, "%s\n", __func__);
+	if (atomic_read(&stat->enabled)) {
+		mutex_lock(&stat->lock);
+
+			schedule_delayed_work(&stat->input_work,
+					msecs_to_jiffies(stat->
+							pdata->poll_interval));
+
+#ifdef SLEEP
+		err = lsm330_gyr_register_update(stat, buf, CTRL_REG1,
+				0x0F, (ENABLE_ALL_AXES | PM_NORMAL));
+#else
+		err = lsm330_gyr_register_update(stat, buf, CTRL_REG1,
+				0x08, PM_NORMAL);
+#endif
+		mutex_unlock(&stat->lock);
+
+	}
+#endif /*CONFIG_PM*/
+	return err;
+}
+
+
+static const struct i2c_device_id lsm330_gyr_id[] = {
+	{ LSM330_GYR_DEV_NAME , 0 },
+	{},
+};
+
+MODULE_DEVICE_TABLE(i2c, lsm330_gyr_id);
+
+static const struct dev_pm_ops lsm330_gyr_pm = {
+	.suspend = lsm330_gyr_suspend,
+	.resume = lsm330_gyr_resume,
+};
+
+static struct i2c_driver lsm330_gyr_driver = {
+	.driver = {
+			.owner = THIS_MODULE,
+			.name = LSM330_GYR_DEV_NAME,
+			.pm = &lsm330_gyr_pm,
+	},
+	.probe = lsm330_gyr_probe,
+	.remove = lsm330_gyr_remove,
+	.id_table = lsm330_gyr_id,
+
+};
+
+static int __init lsm330_gyr_init(void)
+{
+
+	pr_info("%s: gyroscope sysfs driver init\n", LSM330_GYR_DEV_NAME);
+
+	return i2c_add_driver(&lsm330_gyr_driver);
+}
+
+static void __exit lsm330_gyr_exit(void)
+{
+
+	pr_info("%s exit\n", LSM330_GYR_DEV_NAME);
+	i2c_del_driver(&lsm330_gyr_driver);
+	return;
+}
+
+module_init(lsm330_gyr_init);
+module_exit(lsm330_gyr_exit);
+
+MODULE_DESCRIPTION("lsm330 gyroscope driver");
+MODULE_AUTHOR("Matteo Dameno, Denis Ciocca, STMicroelectronics");
+MODULE_LICENSE("GPL");
